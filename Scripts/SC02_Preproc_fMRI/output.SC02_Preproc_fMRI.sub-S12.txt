echo auto-generated by afni_proc.py, Tue Nov 17 16:44:54 2020
auto-generated by afni_proc.py, Tue Nov 17 16:44:54 2020
echo (version 7.12, April 14, 2020)
(version 7.12, April 14, 2020)
echo execution started: `date`
date
execution started: Tue Nov 17 17:00:38 EST 2020
afni -ver
Precompiled binary linux_centos_7_64: Nov 12 2020 (Version AFNI_20.3.02 'Vespasian')
afni_history -check_date 27 Jun 2019
-- is current: afni_history as new as: 27 Jun 2019
               most recent entry is:   12 Nov 2020
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-S12
endif
set output_dir = /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI
if ( -d /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI ) then
set runs = ( `count -digits 2 1 6` )
count -digits 2 1 6
mkdir /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI
mkdir /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/stimuli
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D01_Anatomical/anatSS.sub-S12.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/anatSS.sub-S12
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D01_Anatomical/anatUAC.sub-S12.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/copy_af_anat_w_skull
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/Freesurfer/sub-S12/SUMA/aparc.a2009s+aseg.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/copy_af_aaseg
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/Freesurfer/sub-S12/SUMA/aparc.a2009s+aseg.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/copy_af_aeseg
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/Freesurfer/sub-S12/SUMA/fs_ap_latvent.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/copy_af_FSvent
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/Freesurfer/sub-S12/SUMA/fs_ap_wm.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/copy_af_FSWe
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D01_Anatomical/anatQQ.sub-S12.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/anatQQ.sub-S12
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D01_Anatomical/anatQQ.sub-S12.aff12.1D /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/anatQQ.sub-S12.aff12.1D
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dcopy /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D01_Anatomical/anatQQ.sub-S12_WARP.nii.gz /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/anatQQ.sub-S12_WARP.nii.gz
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
3dTcat -prefix /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/pb00.sub-S12.r01.tcat /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D00_OriginalData/sub-S12_SleepAscending+orig[5..$]
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 7.1 s
3dTcat -prefix /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/pb00.sub-S12.r02.tcat /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D00_OriginalData/sub-S12_SleepDescending+orig[5..$]
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.1 s
3dTcat -prefix /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/pb00.sub-S12.r03.tcat /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D00_OriginalData/sub-S12_SleepRSER+orig[5..$]
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 3.6 s
3dTcat -prefix /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/pb00.sub-S12.r04.tcat /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D00_OriginalData/sub-S12_WakeAscending+orig[5..$]
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.6 s
3dTcat -prefix /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/pb00.sub-S12.r05.tcat /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D00_OriginalData/sub-S12_WakeDescending+orig[5..$]
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.6 s
3dTcat -prefix /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI/pb00.sub-S12.r06.tcat /data/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D00_OriginalData/sub-S12_WakeRSER+orig[5..$]
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 3.9 s
set tr_counts = ( 412 412 295 412 412 295 )
cd /data/SFIM_Vigilance/PRJ_Vigilance_Smk02//PrcsData/sub-S12/D02_Preproc_fMRI
@radial_correlate -nfirst 0 -do_clean yes -rdir radcor.pb00.tcat pb00.sub-S12.r01.tcat+orig.HEAD pb00.sub-S12.r02.tcat+orig.HEAD pb00.sub-S12.r03.tcat+orig.HEAD pb00.sub-S12.r04.tcat+orig.HEAD pb00.sub-S12.r05.tcat+orig.HEAD pb00.sub-S12.r06.tcat+orig.HEAD
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.1 s
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.0 s
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 3.6 s
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.5 s
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 5.4 s
++ 3dTcat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ elapsed time = 4.1 s
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r01+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r01+orig.BRIK is 13.020722 degrees from plumb.
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./radcor.20.r01.automask+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./radcor.20.r01.automask+orig.BRIK is 13.020722 degrees from plumb.

-- running correlation on dataset pb00.sub-S12.r01.tcat+orig.HEAD ...

++ merge blur: rad 20, FWHM 40
++ 3dmerge: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r01+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r01+orig.BRIK is 13.020722 degrees from plumb.
++ default -1dindex = 0
++ default -1tindex = 1
++ Oblique dataset:./epi.r01+orig.BRIK is 13.020722 degrees from plumb.
Program 3dmerge 
3dmerge: edit and combine 3D datasets, by RW Cox
++ editing input dataset in memory (103.0 MB)
............................................................................................................................................................................................................................................................................................................................................................................................................................
-- Wrote edited dataset: ./sphere.mean.20.r01+orig.BRIK

++ 3dTcorrelate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./sphere.mean.20.r01+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./sphere.mean.20.r01+orig.BRIK is 13.020722 degrees from plumb.
++ Oblique dataset:./epi.r01+orig.BRIK is 13.020722 degrees from plumb.
++ Wrote dataset: ./radcor.20.r01.corr+orig.BRIK
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r02+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r02+orig.BRIK is 13.020722 degrees from plumb.
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./radcor.20.r02.automask+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./radcor.20.r02.automask+orig.BRIK is 13.020722 degrees from plumb.

-- running correlation on dataset pb00.sub-S12.r02.tcat+orig.HEAD ...

++ merge blur: rad 20, FWHM 40
++ 3dmerge: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r02+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r02+orig.BRIK is 13.020722 degrees from plumb.
++ default -1dindex = 0
++ default -1tindex = 1
++ Oblique dataset:./epi.r02+orig.BRIK is 13.020722 degrees from plumb.
Program 3dmerge 
3dmerge: edit and combine 3D datasets, by RW Cox
++ editing input dataset in memory (103.0 MB)
............................................................................................................................................................................................................................................................................................................................................................................................................................
-- Wrote edited dataset: ./sphere.mean.20.r02+orig.BRIK

++ 3dTcorrelate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./sphere.mean.20.r02+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./sphere.mean.20.r02+orig.BRIK is 13.020722 degrees from plumb.
++ Oblique dataset:./epi.r02+orig.BRIK is 13.020722 degrees from plumb.
++ Wrote dataset: ./radcor.20.r02.corr+orig.BRIK
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r03+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r03+orig.BRIK is 13.019373 degrees from plumb.
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./radcor.20.r03.automask+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./radcor.20.r03.automask+orig.BRIK is 13.019373 degrees from plumb.

-- running correlation on dataset pb00.sub-S12.r03.tcat+orig.HEAD ...

++ merge blur: rad 20, FWHM 40
++ 3dmerge: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r03+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r03+orig.BRIK is 13.019373 degrees from plumb.
++ default -1dindex = 0
++ default -1tindex = 1
++ Oblique dataset:./epi.r03+orig.BRIK is 13.019373 degrees from plumb.
Program 3dmerge 
3dmerge: edit and combine 3D datasets, by RW Cox
++ editing input dataset in memory (73.8 MB)
.......................................................................................................................................................................................................................................................................................................
-- Wrote edited dataset: ./sphere.mean.20.r03+orig.BRIK

++ 3dTcorrelate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./sphere.mean.20.r03+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./sphere.mean.20.r03+orig.BRIK is 13.019373 degrees from plumb.
++ Oblique dataset:./epi.r03+orig.BRIK is 13.019373 degrees from plumb.
++ Wrote dataset: ./radcor.20.r03.corr+orig.BRIK
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r04+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r04+orig.BRIK is 20.346895 degrees from plumb.
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./radcor.20.r04.automask+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./radcor.20.r04.automask+orig.BRIK is 20.346895 degrees from plumb.

-- running correlation on dataset pb00.sub-S12.r04.tcat+orig.HEAD ...

++ merge blur: rad 20, FWHM 40
++ 3dmerge: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r04+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r04+orig.BRIK is 20.346895 degrees from plumb.
++ default -1dindex = 0
++ default -1tindex = 1
++ Oblique dataset:./epi.r04+orig.BRIK is 20.346895 degrees from plumb.
Program 3dmerge 
3dmerge: edit and combine 3D datasets, by RW Cox
++ editing input dataset in memory (103.0 MB)
............................................................................................................................................................................................................................................................................................................................................................................................................................
-- Wrote edited dataset: ./sphere.mean.20.r04+orig.BRIK

++ 3dTcorrelate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./sphere.mean.20.r04+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./sphere.mean.20.r04+orig.BRIK is 20.346895 degrees from plumb.
++ Oblique dataset:./epi.r04+orig.BRIK is 20.346895 degrees from plumb.
++ Wrote dataset: ./radcor.20.r04.corr+orig.BRIK
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r05+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r05+orig.BRIK is 20.346895 degrees from plumb.
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./radcor.20.r05.automask+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./radcor.20.r05.automask+orig.BRIK is 20.346895 degrees from plumb.

-- running correlation on dataset pb00.sub-S12.r05.tcat+orig.HEAD ...

++ merge blur: rad 20, FWHM 40
++ 3dmerge: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r05+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r05+orig.BRIK is 20.346895 degrees from plumb.
++ default -1dindex = 0
++ default -1tindex = 1
++ Oblique dataset:./epi.r05+orig.BRIK is 20.346895 degrees from plumb.
Program 3dmerge 
3dmerge: edit and combine 3D datasets, by RW Cox
++ editing input dataset in memory (103.0 MB)
............................................................................................................................................................................................................................................................................................................................................................................................................................
-- Wrote edited dataset: ./sphere.mean.20.r05+orig.BRIK

++ 3dTcorrelate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./sphere.mean.20.r05+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./sphere.mean.20.r05+orig.BRIK is 20.346895 degrees from plumb.
++ Oblique dataset:./epi.r05+orig.BRIK is 20.346895 degrees from plumb.
++ Wrote dataset: ./radcor.20.r05.corr+orig.BRIK
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r06+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r06+orig.BRIK is 20.346895 degrees from plumb.
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./radcor.20.r06.automask+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./radcor.20.r06.automask+orig.BRIK is 20.346895 degrees from plumb.

-- running correlation on dataset pb00.sub-S12.r06.tcat+orig.HEAD ...

++ merge blur: rad 20, FWHM 40
++ 3dmerge: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./epi.r06+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./epi.r06+orig.BRIK is 20.346895 degrees from plumb.
++ default -1dindex = 0
++ default -1tindex = 1
++ Oblique dataset:./epi.r06+orig.BRIK is 20.346895 degrees from plumb.
Program 3dmerge 
3dmerge: edit and combine 3D datasets, by RW Cox
++ editing input dataset in memory (73.8 MB)
.......................................................................................................................................................................................................................................................................................................
-- Wrote edited dataset: ./sphere.mean.20.r06+orig.BRIK

++ 3dTcorrelate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./sphere.mean.20.r06+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./sphere.mean.20.r06+orig.BRIK is 20.346895 degrees from plumb.
++ Oblique dataset:./epi.r06+orig.BRIK is 20.346895 degrees from plumb.
++ Wrote dataset: ./radcor.20.r06.corr+orig.BRIK
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ have do_clean, cleaning up...

touch out.pre_ss_warn.txt
foreach run ( 01 02 03 04 05 06 )
3dToutcount -automask -fraction -polort 6 -legendre pb00.sub-S12.r01.tcat+orig
++ 3dToutcount: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r01.tcat+orig.BRIK is 13.020722 degrees from plumb.
++ 42481 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.05)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
end
3dToutcount -automask -fraction -polort 6 -legendre pb00.sub-S12.r02.tcat+orig
++ 3dToutcount: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r02.tcat+orig.BRIK is 13.020722 degrees from plumb.
++ 42372 voxels passed mask/clip
1deval -a outcount.r02.1D -expr 1-step(a-0.05)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r02.1D{0} -expr step(a-0.4)
end
3dToutcount -automask -fraction -polort 6 -legendre pb00.sub-S12.r03.tcat+orig
++ 3dToutcount: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r03.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r03.tcat+orig.BRIK is 13.019373 degrees from plumb.
++ 42475 voxels passed mask/clip
1deval -a outcount.r03.1D -expr 1-step(a-0.05)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r03.1D{0} -expr step(a-0.4)
end
3dToutcount -automask -fraction -polort 6 -legendre pb00.sub-S12.r04.tcat+orig
++ 3dToutcount: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r04.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r04.tcat+orig.BRIK is 20.346895 degrees from plumb.
++ 41879 voxels passed mask/clip
1deval -a outcount.r04.1D -expr 1-step(a-0.05)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r04.1D{0} -expr step(a-0.4)
end
3dToutcount -automask -fraction -polort 6 -legendre pb00.sub-S12.r05.tcat+orig
++ 3dToutcount: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r05.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r05.tcat+orig.BRIK is 20.346895 degrees from plumb.
++ 41863 voxels passed mask/clip
1deval -a outcount.r05.1D -expr 1-step(a-0.05)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r05.1D{0} -expr step(a-0.4)
end
3dToutcount -automask -fraction -polort 6 -legendre pb00.sub-S12.r06.tcat+orig
++ 3dToutcount: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r06.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r06.tcat+orig.BRIK is 20.346895 degrees from plumb.
++ 41804 voxels passed mask/clip
1deval -a outcount.r06.1D -expr 1-step(a-0.05)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r06.1D{0} -expr step(a-0.4)
end
cat outcount.r01.1D outcount.r02.1D outcount.r03.1D outcount.r04.1D outcount.r05.1D outcount.r06.1D
cat rm.out.cen.r01.1D rm.out.cen.r02.1D rm.out.cen.r03.1D rm.out.cen.r04.1D rm.out.cen.r05.1D rm.out.cen.r06.1D
foreach run ( 01 02 03 04 05 06 )
3dDespike -NEW -nomask -prefix pb01.sub-S12.r01.despike pb00.sub-S12.r01.tcat+orig
++ 3dDespike: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r01.tcat+orig.BRIK is 13.020722 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 412
++ using 412 time points => -corder 14
++ Loading dataset pb00.sub-S12.r01.tcat+orig
++ processing all 131072 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
++ start OpenMP thread #12
++ start OpenMP thread #5
++ start OpenMP thread #10
++ start OpenMP thread #13
++ start OpenMP thread #3
++ start OpenMP thread #9
++ start OpenMP thread #11
++ start OpenMP thread #4
++ start OpenMP thread #1
++ start OpenMP thread #2
++ start OpenMP thread #6
++ start OpenMP thread #7
++ start OpenMP thread #14
++ start OpenMP thread #8
........................................................
++ Elapsed despike time =  1s 140ms

++ FINAL: 53157888 data points, 2191249 edits [4.122%], 206949 big edits [0.389%]
end
3dDespike -NEW -nomask -prefix pb01.sub-S12.r02.despike pb00.sub-S12.r02.tcat+orig
++ 3dDespike: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r02.tcat+orig.BRIK is 13.020722 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 412
++ using 412 time points => -corder 14
++ Loading dataset pb00.sub-S12.r02.tcat+orig
++ processing all 131072 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #1
++ start OpenMP thread #9
++ start OpenMP thread #13
++ start OpenMP thread #6
++ start OpenMP thread #12
++ start OpenMP thread #5
++ start OpenMP thread #11
++ start OpenMP thread #2
++ start OpenMP thread #4
++ start OpenMP thread #8
++ start OpenMP thread #14
++ start OpenMP thread #3
++ start OpenMP thread #10
++ start OpenMP thread #7
++ start OpenMP thread #0
........................................................
++ Elapsed despike time =  1s 218ms

++ FINAL: 53157888 data points, 2182811 edits [4.106%], 232393 big edits [0.437%]
end
3dDespike -NEW -nomask -prefix pb01.sub-S12.r03.despike pb00.sub-S12.r03.tcat+orig
++ 3dDespike: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r03.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r03.tcat+orig.BRIK is 13.019373 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 295
++ using 295 time points => -corder 10
++ Loading dataset pb00.sub-S12.r03.tcat+orig
++ processing all 131072 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
++ start OpenMP thread #13
++ start OpenMP thread #14
++ start OpenMP thread #1
++ start OpenMP thread #7
++ start OpenMP thread #10
++ start OpenMP thread #5
++ start OpenMP thread #9
++ start OpenMP thread #6
++ start OpenMP thread #3
++ start OpenMP thread #12
++ start OpenMP thread #2
++ start OpenMP thread #4
++ start OpenMP thread #11
++ start OpenMP thread #8
........................................................
++ Elapsed despike time =  749ms

++ FINAL: 38062080 data points, 1527378 edits [4.013%], 122835 big edits [0.323%]
end
3dDespike -NEW -nomask -prefix pb01.sub-S12.r04.despike pb00.sub-S12.r04.tcat+orig
++ 3dDespike: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r04.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r04.tcat+orig.BRIK is 20.346895 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 412
++ using 412 time points => -corder 14
++ Loading dataset pb00.sub-S12.r04.tcat+orig
++ processing all 131072 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
++ start OpenMP thread #12
++ start OpenMP thread #5
++ start OpenMP thread #10
++ start OpenMP thread #1
++ start OpenMP thread #8
++ start OpenMP thread #9
++ start OpenMP thread #6
++ start OpenMP thread #14
++ start OpenMP thread #4
++ start OpenMP thread #11
++ start OpenMP thread #2
++ start OpenMP thread #3
++ start OpenMP thread #13
++ start OpenMP thread #7
........................................................
++ Elapsed despike time =  1s 139ms

++ FINAL: 52325236 data points, 2117989 edits [4.048%], 182702 big edits [0.349%]
end
3dDespike -NEW -nomask -prefix pb01.sub-S12.r05.despike pb00.sub-S12.r05.tcat+orig
++ 3dDespike: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r05.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r05.tcat+orig.BRIK is 20.346895 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 412
++ using 412 time points => -corder 14
++ Loading dataset pb00.sub-S12.r05.tcat+orig
++ processing all 131072 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #2
++ start OpenMP thread #5
++ start OpenMP thread #11
++ start OpenMP thread #3
++ start OpenMP thread #0
++ start OpenMP thread #12
++ start OpenMP thread #7
++ start OpenMP thread #8
++ start OpenMP thread #13
++ start OpenMP thread #10
++ start OpenMP thread #1
++ start OpenMP thread #14
++ start OpenMP thread #9
++ start OpenMP thread #6
++ start OpenMP thread #4
........................................................
++ Elapsed despike time =  1s 154ms

++ FINAL: 52326884 data points, 2179086 edits [4.164%], 197668 big edits [0.378%]
end
3dDespike -NEW -nomask -prefix pb01.sub-S12.r06.despike pb00.sub-S12.r06.tcat+orig
++ 3dDespike: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-S12.r06.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-S12.r06.tcat+orig.BRIK is 20.346895 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 295
++ using 295 time points => -corder 10
++ Loading dataset pb00.sub-S12.r06.tcat+orig
++ processing all 131072 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
++ start OpenMP thread #2
++ start OpenMP thread #1
++ start OpenMP thread #14
++ start OpenMP thread #5
++ start OpenMP thread #12
++ start OpenMP thread #4
++ start OpenMP thread #9
++ start OpenMP thread #6
++ start OpenMP thread #3
++ start OpenMP thread #13
++ start OpenMP thread #11
++ start OpenMP thread #8
++ start OpenMP thread #7
++ start OpenMP thread #10
........................................................
++ Elapsed despike time =  729ms

++ FINAL: 37466770 data points, 1495341 edits [3.991%], 106014 big edits [0.283%]
end
foreach run ( 01 02 03 04 05 06 )
3dTshift -tzero 0 -quintic -prefix pb02.sub-S12.r01.tshift pb01.sub-S12.r01.despike+orig
++ 3dTshift: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-S12.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-S12.r01.despike+orig.BRIK is 13.020722 degrees from plumb.
end
3dTshift -tzero 0 -quintic -prefix pb02.sub-S12.r02.tshift pb01.sub-S12.r02.despike+orig
++ 3dTshift: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-S12.r02.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-S12.r02.despike+orig.BRIK is 13.020722 degrees from plumb.
end
3dTshift -tzero 0 -quintic -prefix pb02.sub-S12.r03.tshift pb01.sub-S12.r03.despike+orig
++ 3dTshift: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-S12.r03.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-S12.r03.despike+orig.BRIK is 13.019373 degrees from plumb.
end
3dTshift -tzero 0 -quintic -prefix pb02.sub-S12.r04.tshift pb01.sub-S12.r04.despike+orig
++ 3dTshift: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-S12.r04.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-S12.r04.despike+orig.BRIK is 20.346895 degrees from plumb.
end
3dTshift -tzero 0 -quintic -prefix pb02.sub-S12.r05.tshift pb01.sub-S12.r05.despike+orig
++ 3dTshift: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-S12.r05.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-S12.r05.despike+orig.BRIK is 20.346895 degrees from plumb.
end
3dTshift -tzero 0 -quintic -prefix pb02.sub-S12.r06.tshift pb01.sub-S12.r06.despike+orig
++ 3dTshift: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-S12.r06.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-S12.r06.despike+orig.BRIK is 20.346895 degrees from plumb.
end
3dbucket -prefix vr_base pb02.sub-S12.r01.tshift+orig[0]
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
align_epi_anat.py -anat2epi -anat anatSS.sub-S12+orig -suffix _al_junk -epi vr_base+orig -epi_base 0 -epi_strip 3dAutomask -anat_has_skull no -cost lpc+ZZ -giant_move -check_flip -volreg off -tshift off
#++ align_epi_anat version: 1.62
#++ turning off volume registration
#Script is running (command trimmed):
  3dAttribute DELTA ./vr_base+orig
#Script is running (command trimmed):
  3dAttribute DELTA ./vr_base+orig
#Script is running (command trimmed):
  3dAttribute DELTA ./anatSS.sub-S12+orig
#++ Multi-cost is lpc+ZZ
#++ Removing all the temporary files
#Script is running:
  \rm -f ./__tt_vr_base*
#Script is running:
  \rm -f ./__tt_anatSS.sub-S12*
#Script is running (command trimmed):
  3dcopy ./anatSS.sub-S12+orig ./anatSS.sub-S12_unflipped+orig
++ 3dcopy: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
#Script is running (command trimmed):
  3dinfo ./anatSS.sub-S12_unflipped+orig | \grep 'Data Axes Tilt:'|\grep 'Oblique'
#++ Dataset /vf/users/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D02_Preproc_fMRI/anatSS.sub-S12_unflipped+orig is not oblique
#Script is running (command trimmed):
  3dinfo ./vr_base+orig | \grep 'Data Axes Tilt:'|\grep 'Oblique'
#++ Dataset /vf/users/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D02_Preproc_fMRI/vr_base+orig is ***oblique****
#Script is running (command trimmed):
  3dAttribute DELTA ./anatSS.sub-S12_unflipped+orig
#++ Spacing for anat to oblique epi alignment is 1.000000
#++ Matching obliquity of anat to epi
#Script is running (command trimmed):
  3dWarp -verb -card2oblique ./vr_base+orig -prefix ./anatSS.sub-S12_unflipped_ob -newgrid 1.000000 ./anatSS.sub-S12_unflipped+orig | \grep -A 4 '# mat44 Obliquity Transformation ::' > ./anatSS.sub-S12_unflipped_obla2e_mat.1D
++ 3dWarp: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
#++ using 0th sub-brick because only one found
#Script is running (command trimmed):
  3dbucket -prefix ./__tt_vr_base_ts ./vr_base+orig'[0]'
++ 3dbucket: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
#++ removing skull or area outside brain
#Script is running (command trimmed):
  3dAutomask -apply_prefix ./vr_base_ts_ns ./__tt_vr_base_ts+orig
++ 3dAutomask: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_ts+orig.BRIK is 13.020722 degrees from plumb.
++ Loading dataset ./__tt_vr_base_ts+orig
++ Forming automask
 + Fixed clip level = 327.693054
 + Used gradual clip level = 313.715607 .. 345.496765
 + Number voxels above clip level = 42963
 + Clustering voxels ...
 + Largest cluster has 42415 voxels
 + Clustering voxels ...
 + Largest cluster has 42145 voxels
 + Filled   287 voxels in small holes; now have 42432 voxels
 + Clustering voxels ...
 + Largest cluster has 42432 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 88638 voxels
 + Mask now has 42434 voxels
++ 42434 voxels in the mask [out of 131072: 32.37%]
++ first   9 x-planes are zero [from R]
++ last   11 x-planes are zero [from L]
++ first   0 y-planes are zero [from P]
++ last    5 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    0 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ CPU time = 0.000000 sec
#++ Computing weight mask
#Script is running (command trimmed):
  3dBrickStat -automask -percentile 90.000000 1 90.000000 ./vr_base_ts_ns+orig
#++ Applying threshold of 804.590942 on /vf/users/SFIM_Vigilance/PRJ_Vigilance_Smk02/PrcsData/sub-S12/D02_Preproc_fMRI/vr_base_ts_ns+orig
#Script is running (command trimmed):
  3dcalc -datum float -prefix ./vr_base_ts_ns_wt -a ./vr_base_ts_ns+orig -expr 'min(1,(a/804.590942))'
++ 3dcalc: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: A cast of thousands
#++ Aligning anat data to epi data
#Script is running (command trimmed):
  3dAllineate -lpc+ZZ -wtprefix ./anatSS.sub-S12_unflipped_ob_al_junk_wtal -weight ./vr_base_ts_ns_wt+orig -source ./anatSS.sub-S12_unflipped_ob+orig -prefix ./anatSS.sub-S12_unflipped_ob_temp_al_junk -base ./vr_base_ts_ns+orig -cmass -1Dmatrix_save ./anatSS.sub-S12_al_junk_e2a_only_mat.aff12.1D -master BASE -mast_dxyz 1.000000 -weight_frac 1.0 -maxrot 6 -maxshf 10 -VERB -warp aff -source_automask+4 -twobest 11 -twopass -VERB -maxrot 45 -maxshf 40 -fineblur 1 -source_automask+2 
++ 3dAllineate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_ts_ns_wt+orig.BRIK is 13.020722 degrees from plumb.
++ Oblique dataset:./vr_base_ts_ns+orig.BRIK is 13.020722 degrees from plumb.
++ Source dataset: ./anatSS.sub-S12_unflipped_ob+orig.HEAD
++ Base dataset:   ./vr_base_ts_ns+orig.HEAD
++ Loading datasets into memory
++ 1607614 voxels in -source_automask+2
++ Zero-pad: ybot=8 ytop=3
++ Zero-pad: zbot=8 ztop=8
++ 42434 voxels [18.4%] in weight mask
++ Number of points for matching = 42434
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
 +     - It is nothing to worry about: 3dAllineate aligns based on coordinates.
 +     - But it is always important to check the alignment visually to be sure.
++ Local correlation: blok type = 'RHDD(11.9925)'
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 30.634 38.038 24.194 (index)
 + source center of mass = 137.737 173.610 194.387 (index)
 + source-target CM = -0.523 1.572 -1.053 (xyz)
 + estimated center of mass shifts = -0.523 1.572 -1.053
++ shift param auto-range: -61.2..60.1 -69.7..72.8 -57.6..55.5
 + Range param#4 [z-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#1 [x-shift] = -10.523048 .. 9.476952  center = -0.523048
 + Range param#2 [y-shift] = -8.427784 .. 11.572216  center = 1.572216
 + Range param#3 [z-shift] = -11.052666 .. 8.947334  center = -1.052666
 + Range param#4 [z-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#1 [x-shift] = -40.523048 .. 39.476952  center = -0.523048
 + Range param#2 [y-shift] = -38.427784 .. 41.572216  center = 1.572216
 + Range param#3 [z-shift] = -41.052666 .. 38.947334  center = -1.052666
 + 12 free parameters
++ Normalized convergence radius = 0.0000092
++ Final parameter search ranges:
 +       x-shift =  -40.523 ..   39.477
 +       y-shift =  -38.428 ..   41.572
 +       z-shift =  -41.053 ..   38.947
 +       z-angle =  -45.000 ..   45.000
 +       x-angle =  -45.000 ..   45.000
 +       y-angle =  -45.000 ..   45.000
 +       x-scale =    0.833 ..    1.200
 +       y-scale =    0.833 ..    1.200
 +       z-scale =    0.833 ..    1.200
 +     y/x-shear =   -0.111 ..    0.111
 +     z/x-shear =   -0.111 ..    0.111
 +     z/y-shear =   -0.111 ..    0.111
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 15
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1607614 [out of 27642384] voxels
 + base mask has 56057 [out of 230400] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=3.75
 + - Smoothing source; radius=3.75
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - copying weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 271.959 .. 1039.12; base clip 225.2 .. 812.844
 +  - versus source range 0.55725 .. 947.568; base range 0 .. 1040.32
 + 37683 total points stored in 342 'RHDD(12.5651)' bloks
 + - number of free params = 6
 + - Test (64+61)*64 params [top5=*o+-.]:#o++.o++.+.-..o---....-+..$ + - best 45 costs found:
    0 v= 0.229486:  -0.52   1.57  -1.05   0.00   0.00   0.00  [grid]
    1 v= 0.677890: -13.86  14.91 -14.39 -15.00  15.00 -15.00  [grid]
    2 v= 0.678773: -13.86 -25.09  12.28 -30.00 -15.00 -15.00  [grid]
    3 v= 0.700113:  12.81  14.91 -14.39  15.00  15.00  15.00  [grid]
    4 v= 0.708322:  12.81 -11.76  12.28 -15.00 -15.00 -30.00  [grid]
    5 v= 0.722881: -13.86 -11.76  12.28  15.00 -15.00  30.00  [grid]
    6 v= 0.729487:  12.81 -25.09  12.28  30.00 -15.00  15.00  [grid]
    7 v= 0.730540: -27.19 -11.76  12.28 -15.00 -15.00  15.00  [grid]
    8 v= 0.732082:  26.14  14.91 -27.72  15.00  15.00 -15.00  [grid]
    9 v= 0.735580:  -9.16 -18.86  16.42 -25.20 -18.50 -13.54  [rand]
   10 v= 0.741339: -27.19  14.91 -27.72 -15.00  15.00  15.00  [grid]
   11 v= 0.748242: -33.01 -13.12 -12.86 -11.16  -9.40  34.39  [rand]
   12 v= 0.760936: -10.85 -27.24  13.96 -30.67 -17.79 -20.52  [rand]
   13 v= 0.765293:  12.81 -25.09  12.28 -15.00 -15.00 -30.00  [grid]
   14 v= 0.779555: -13.86 -25.09  12.28  15.00 -15.00  30.00  [grid]
   15 v= 0.783947: -27.19  14.91 -27.72 -15.00  15.00  30.00  [grid]
   16 v= 0.785334:   8.12 -18.86  16.42  25.20 -18.50  13.54  [rand]
   17 v= 0.786608:  26.14 -11.76  12.28  15.00 -15.00 -15.00  [grid]
   18 v= 0.786855:   9.80 -27.24  13.96  30.67 -17.79  20.52  [rand]
   19 v= 0.791585:  31.96 -13.12 -12.86  11.16  -9.40 -34.39  [rand]
   20 v= 0.820159:  17.81 -24.57   4.99   6.51 -20.18  -7.56  [rand]
   21 v= 0.823602:  26.14  14.91 -27.72  15.00  15.00 -30.00  [grid]
   22 v= 0.824689: -13.86  14.91 -27.72 -15.00  30.00 -15.00  [grid]
   23 v= 0.831421: -16.51 -17.92   4.67 -20.53  -3.14 -10.08  [rand]
   24 v= 0.833123: -18.85 -24.57   4.99  -6.51 -20.18   7.56  [rand]
   25 v= 0.837835:  12.81  14.91 -27.72  15.00  30.00  30.00  [grid]
   26 v= 0.842657:  25.78 -24.38  16.74 -15.82 -17.65 -37.25  [rand]
   27 v= 0.843900: -27.19 -25.09  12.28 -15.00 -15.00  15.00  [grid]
   28 v= 0.845815:  15.46 -17.92   4.67  20.53  -3.14  10.08  [rand]
   29 v= 0.852200:  34.34 -28.98  14.72 -11.68 -29.04 -39.38  [rand]
   30 v= 0.859125: -13.86  14.91 -27.72 -15.00  30.00 -30.00  [grid]
   31 v= 0.863311: -16.74  15.68 -36.18 -15.74  34.09  -7.78  [rand]
   32 v= 0.868392:  12.81  14.91 -27.72  15.00  30.00  15.00  [grid]
   33 v= 0.881544:  12.90  24.26 -32.39   4.37  20.12 -15.12  [rand]
   34 v= 0.888297: -13.86 -25.09  25.61 -30.00 -15.00 -15.00  [grid]
   35 v= 0.890633:  26.14 -25.09  12.28  15.00 -15.00 -15.00  [grid]
   36 v= 0.894020: -27.19  14.91 -27.72 -30.00  30.00 -15.00  [grid]
   37 v= 0.899029:  14.77  22.46 -31.44  14.56  29.40  15.92  [rand]
   38 v= 0.904282: -26.83 -24.38  16.74  15.82 -17.65  37.25  [rand]
   39 v= 0.904714: -15.81  22.46 -31.44 -14.56  29.40 -15.92  [rand]
   40 v= 0.906129:  15.69  15.68 -36.18  15.74  34.09   7.78  [rand]
   41 v= 0.911046: -35.39 -28.98  14.72  11.68 -29.04  39.38  [rand]
   42 v= 0.915755:  26.14  14.91 -14.39  15.00  15.00 -15.00  [grid]
   43 v= 0.916570:  13.68  -7.88   3.79 -15.99 -13.53 -29.93  [rand]
   44 v= 0.916650:  12.81 -25.09  25.61  30.00 -15.00  15.00  [grid]
 + - A little optimization:*[#8004=-0.000554018] *[#8013=-0.141543] *[#8014=-0.184191] *[#8017=-0.284788] *[#8023=-0.311879] *[#8026=-0.32503] .............................................
 + - costs of the above after a little optimization:
  * 0 v=-0.325030:  -1.31  -0.21   1.94  -1.13  -0.06   0.32  [grid]
    1 v= 0.092025:  -6.00  -1.62   1.29  -3.22  -0.51   1.78  [grid]
    2 v= 0.648759: -13.01 -22.64  15.02 -29.45 -14.26 -15.81  [grid]
    3 v= 0.444820:   9.65   7.93 -13.43   5.16  10.60  -1.28  [grid]
    4 v= 0.130712:   6.04  -2.01   2.57   3.15  -0.97  -0.79  [grid]
    5 v= 0.367212: -10.07  -6.66   5.77  -6.28  -5.42   5.10  [grid]
    6 v= 0.673160:  13.22 -22.60  16.33  26.50 -15.44  13.49  [grid]
    7 v= 0.524399: -23.48  -9.65   6.70  -9.76  -8.93  13.29  [grid]
    8 v= 0.651152:  25.83  14.00 -23.40  13.44  14.72 -14.77  [grid]
    9 v= 0.619415:  -9.47 -18.73  15.81 -23.24 -13.87 -14.33  [rand]
   10 v= 0.440460: -14.38   1.29  -9.28  -7.04   5.51   6.20  [grid]
   11 v= 0.662168: -36.61 -11.59 -10.32 -12.36  -8.28  32.20  [rand]
   12 v= 0.653860: -13.08 -23.30  17.03 -26.80 -16.64 -13.86  [rand]
   13 v= 0.646467:  13.76 -20.69  11.85 -17.63 -15.71 -29.81  [grid]
   14 v= 0.654300: -14.14 -19.88  10.82  15.09 -16.03  28.54  [grid]
   15 v= 0.628987: -27.51   6.04 -20.49 -10.27   7.27  28.57  [grid]
   16 v= 0.479019:  -0.05 -16.92  17.27  -1.97 -15.40  -1.52  [rand]
   17 v=-0.086576:  -0.33  -0.69   3.10  -0.37  -2.02   1.39  [grid]
   18 v= 0.714133:   9.74 -27.12  17.99  30.31 -17.23  19.68  [rand]
   19 v= 0.682038:  35.37 -11.43 -10.58   7.99  -7.31 -36.41  [rand]
   20 v= 0.127758:  -1.54  -1.79   3.17  -3.53   0.02  -3.36  [rand]
   21 v= 0.656579:  25.52   8.47 -26.92  13.96  14.58 -21.06  [grid]
   22 v= 0.683095: -13.90  11.75 -25.33 -15.78  23.04 -11.51  [grid]
   23 v= 0.308369:  -0.28  -5.85   8.94  -3.48  -4.14  -4.57  [rand]
   24 v= 0.460707: -15.26  -9.91   5.84  -9.40  -7.68   6.82  [rand]
   25 v= 0.725784:   6.32  13.84 -26.04  11.40  22.83  25.99  [grid]
   26 v= 0.675318:  22.23 -21.70  10.46 -18.51 -17.24 -39.31  [rand]
   27 v= 0.266789:   2.98  -6.95   8.28   1.72  -6.36  -1.08  [grid]
   28 v=-0.208238:  -0.40  -1.26   3.98  -0.59  -1.84   0.40  [rand]
   29 v= 0.649416:  24.23 -18.23   7.41 -11.47 -16.13 -34.14  [rand]
   30 v= 0.663145:  -8.67   8.27 -20.36 -17.42  18.72 -21.34  [grid]
   31 v= 0.759275: -15.87  13.10 -34.09 -16.11  28.59  -5.11  [rand]
   32 v= 0.562420:   6.11  17.51 -25.34   3.10  19.58  -1.51  [grid]
   33 v= 0.618183:  11.84  13.48 -29.80   4.52  19.24 -15.05  [rand]
   34 v= 0.627128: -13.45 -19.10  14.73 -24.57 -13.75 -11.43  [grid]
   35 v= 0.486700:  15.63 -13.50   6.56   3.33 -11.24 -10.27  [grid]
   36 v= 0.226673:  -5.99  -2.61   4.99  -2.10  -3.12   5.31  [grid]
   37 v= 0.475642:  -0.97   8.06 -21.05  -1.20  13.99  -1.28  [rand]
   38 v= 0.666706: -23.17 -22.82   8.00   8.80 -18.85  30.76  [rand]
   39 v= 0.715362: -13.14  14.98 -28.46 -14.09  24.97 -13.12  [rand]
   40 v= 0.819656:  15.81  16.13 -35.57  14.39  30.02  12.37  [rand]
   41 v= 0.759919: -31.57 -30.78   9.81   8.62 -26.05  37.11  [rand]
   42 v= 0.473617:  16.05   7.81  -7.11   6.33   6.74  -8.73  [grid]
   43 v= 0.602802:  14.54  -9.07   5.36 -13.93  -7.75 -30.22  [rand]
   44 v=-0.224192:   0.34   0.20   0.16   0.28   1.11   1.66  [grid]
 + - save # 0 for possible use in twobest
 + - skip #44 for twobest: too close to set # 0
 + - skip #28 for twobest: too close to set # 0
 + - skip #17 for twobest: too close to set # 0
 + - save # 1 for possible use in twobest
 + - skip #20 for twobest: too close to set # 0
 + - save # 4 for possible use in twobest
 + - skip #36 for twobest: too close to set # 1
 + - save #27 for possible use in twobest
 + - save #23 for possible use in twobest
 + - save # 5 for possible use in twobest
 + - save #10 for possible use in twobest
 + - save # 3 for possible use in twobest
 + - save #24 for possible use in twobest
 + - save #42 for possible use in twobest
 + - save #37 for possible use in twobest
 + - save #16 for possible use in twobest
 + - save #35 for possible use in twobest
 + - save # 7 for possible use in twobest
 + - save #32 for possible use in twobest
 + - save #43 for possible use in twobest
 + - save #33 for possible use in twobest
 + - save # 9 for possible use in twobest
 + - skip #34 for twobest: too close to set # 9
 + - save #15 for possible use in twobest
 + - save #13 for possible use in twobest
 + - save # 2 for possible use in twobest
 + - save #29 for possible use in twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=2.92
 + - Smoothing source; radius=2.92
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 275.056 .. 1053.4; base clip 225.915 .. 828.044
 +  - versus source range 0.0485157 .. 947.27; base range 0 .. 1043.53
 + 36921 total points stored in 354 'RHDD(12.342)' bloks
*[#10642=-0.325953] *[#10643=-0.334274] *[#10644=-0.336274] *[#10647=-0.342321] *[#10650=-0.344572] *[#10651=-0.344732] *[#10653=-0.347464] *[#10654=-0.349813] *[#10655=-0.351121] *[#10656=-0.351895] *[#10658=-0.354775] *[#10659=-0.356102] *[#10662=-0.361275] *[#10667=-0.367135] *[#10674=-0.36774] *[#10676=-0.371442] *[#10677=-0.371878] *[#10680=-0.372917] 
 + - param set #1 has cost=-0.372917
 + -- Parameters = -0.4035 0.2456 1.7791 -0.8661 0.0446 -0.1194 0.9987 1.0037 0.9980 -0.0027 -0.0038 0.0022
 + - param set #2 has cost=-0.306102
 + -- Parameters = -0.3532 -0.3310 1.1372 -0.7291 0.3521 -0.0525 1.0182 0.9982 1.0001 -0.0027 -0.0019 0.0002
 + - param set #3 has cost=-0.248306
 + -- Parameters = 0.6547 -0.7828 1.2995 -0.2223 0.7813 -0.3230 1.0021 0.9812 1.0086 -0.0009 0.0039 0.0025
 + - param set #4 has cost=-0.117583
 + -- Parameters = 0.8897 -0.5051 3.4144 -0.0428 -2.2143 -0.6376 1.0066 1.0104 0.9671 0.0181 -0.0067 -0.0085
 + - param set #5 has cost=-0.226515
 + -- Parameters = -0.4991 -0.7310 2.1972 -1.1795 -1.8214 -0.6363 0.9956 1.0069 0.9996 -0.0151 0.0332 -0.0225
 + - param set #6 has cost=0.140820
 + -- Parameters = -2.3532 -3.1305 5.4184 -1.7170 -4.1987 1.0266 0.9967 1.0181 0.9704 0.0009 0.0100 -0.0033
 + - param set #7 has cost=0.103775
 + -- Parameters = -2.5652 2.6235 -5.6334 -1.6042 3.8214 1.7468 0.9987 1.0070 0.9622 -0.0181 -0.0331 -0.0030
 + - param set #8 has cost=0.329107
 + -- Parameters = 1.9171 4.3729 -6.0045 -0.4070 8.3740 -4.1109 0.9992 0.9711 0.9781 -0.0065 0.0004 0.0320
 + - param set #9 has cost=0.042661
 + -- Parameters = -1.6905 -2.2753 5.4251 -1.8105 -1.8940 -0.3901 1.0099 0.9772 0.9855 -0.0053 -0.0082 0.0277
 + - param set #10 has cost=0.404083
 + -- Parameters = 13.0883 2.4431 -3.9443 4.2336 3.3255 -7.1629 0.9971 1.0021 0.9886 0.0048 -0.0003 0.0038
 + - param set #11 has cost=0.396202
 + -- Parameters = -1.4713 7.1610 -10.7301 -0.1442 10.0414 3.4084 0.9819 0.9908 0.9880 -0.0194 -0.0237 -0.0024
*[#11761=-0.373762] *[#11763=-0.376322] *[#11766=-0.38366] 
 + - param set #12 has cost=-0.383660
 + -- Parameters = 0.3658 0.2092 1.1315 -0.3936 0.3496 -0.1833 0.9999 1.0027 0.9983 0.0023 0.0010 -0.0001
 + - sorting parameter sets by cost
 + - scanning for distances from #1
 + --- dist(#2,#1) = 0.0222 
 + --- dist(#3,#1) = 0.05 
 + --- dist(#4,#1) = 0.0587 
 + --- dist(#5,#1) = 0.145 
 + --- dist(#6,#1) = 0.0852 
 + --- dist(#7,#1) = 0.125 
 + --- dist(#8,#1) = 0.153 
 + --- dist(#9,#1) = 0.0761 
 + --- dist(#10,#1) = 0.145 
 + --- dist(#11,#1) = 0.148 
 + --- dist(#12,#1) = 0.159 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=2.27
 + - Smoothing source; radius=2.27
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 277.822 .. 1066.66; base clip 226.345 .. 848.275
 +  - versus source range 0.000285716 .. 947.368; base range 0 .. 1044.59
 + 37192 total points stored in 368 'RHDD(12.2051)' bloks
 + - param set #1 has cost=-0.323457
 + -- Parameters = -0.0077 0.5172 0.8581 -0.5840 0.4127 -0.2232 0.9994 1.0065 0.9966 0.0023 0.0054 -0.0008
 + - param set #2 has cost=-0.333904
 + -- Parameters = -0.3121 0.8839 1.1620 -0.7267 0.3672 -0.0174 0.9997 1.0112 0.9955 -0.0030 -0.0019 0.0023
 + - param set #3 has cost=-0.313332
 + -- Parameters = -0.3263 0.3300 0.8970 -0.7257 0.6076 0.0258 1.0039 1.0030 0.9984 -0.0033 -0.0032 0.0014
 + - param set #4 has cost=-0.302875
 + -- Parameters = 0.0248 0.5388 0.8285 -0.5917 0.9506 -0.2145 0.9996 1.0027 1.0101 0.0010 0.0033 0.0025
 + - param set #5 has cost=-0.252696
 + -- Parameters = -0.0123 0.0115 0.6018 -0.9111 -0.8676 -0.8606 0.9966 1.0077 0.9966 -0.0131 0.0232 -0.0281
 + - param set #6 has cost=-0.248836
 + -- Parameters = 0.5788 0.0402 1.0325 -0.0962 -1.1567 -0.1088 0.9974 1.0139 0.9779 0.0177 0.0027 -0.0186
 + - param set #7 has cost=-0.186978
 + -- Parameters = 0.1308 -0.0385 2.6967 -0.6108 -0.6298 -0.2097 1.0069 1.0076 0.9786 -0.0119 0.0088 0.0107
 + - param set #8 has cost=-0.186947
 + -- Parameters = -1.5899 1.3602 -0.4480 -1.3689 0.0997 0.9016 1.0052 1.0183 0.9557 -0.0268 -0.0197 -0.0050
 + - param set #9 has cost=-0.207222
 + -- Parameters = -0.3135 1.0936 0.6276 -1.0018 -1.1515 -0.4783 1.0093 1.0291 0.9523 -0.0153 0.0032 -0.0126
 + - param set #10 has cost=-0.153416
 + -- Parameters = 1.1603 1.0794 1.4531 0.1522 2.7818 -0.1986 0.9921 0.9982 0.9727 -0.0079 0.0182 0.0539
 + - param set #11 has cost=0.253428
 + -- Parameters = -1.6803 4.2779 -4.2865 -1.4273 8.0170 0.2104 0.9899 0.9874 0.9890 -0.0327 -0.0592 0.0667
 + - param set #12 has cost=0.075375
 + -- Parameters = 4.5909 1.1900 0.8974 1.7621 -0.2841 -2.8775 0.9501 1.0118 0.9733 0.0343 0.0251 -0.0046
 + - sorting parameter sets by cost
 + - scanning for distances from #1
 + --- dist(#2,#1) = 0.0328 
 + --- dist(#3,#1) = 0.0222 
 + --- dist(#4,#1) = 0.0399 
 + --- dist(#5,#1) = 0.137 
 + --- dist(#6,#1) = 0.0945 
 + --- dist(#7,#1) = 0.118 
 + --- dist(#8,#1) = 0.0481 
 + --- dist(#9,#1) = 0.108 
 + --- dist(#10,#1) = 0.232 
 + --- dist(#11,#1) = 0.168 
 + --- dist(#12,#1) = 0.289 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.76
 + - Smoothing source; radius=1.76
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 280.063 .. 1077.58; base clip 226.792 .. 865.304
 +  - versus source range 0 .. 947.374; base range 0 .. 1046.55
 + 38252 total points stored in 392 'RHDD(12.1215)' bloks
 + - param set #1 has cost=-0.262132
 + -- Parameters = -0.2572 0.8684 1.1512 -0.6964 0.3877 0.0072 0.9995 1.0118 0.9941 -0.0032 -0.0021 0.0032
 + - param set #2 has cost=-0.262700
 + -- Parameters = 0.0580 0.8587 0.9617 -0.5511 0.6484 -0.2472 0.9992 1.0092 0.9945 0.0015 0.0040 0.0055
 + - param set #3 has cost=-0.262943
 + -- Parameters = -0.0751 0.9887 0.9202 -0.5595 0.6343 -0.0255 0.9974 1.0120 0.9938 -0.0032 -0.0040 0.0047
 + - param set #4 has cost=-0.258037
 + -- Parameters = -0.0610 0.7601 0.7803 -0.6300 0.7768 -0.2095 1.0034 1.0075 0.9953 -0.0010 0.0032 0.0052
 + - param set #5 has cost=-0.200680
 + -- Parameters = 0.1663 0.3581 0.4686 -0.7408 -0.8904 -0.7947 0.9966 1.0135 0.9931 -0.0086 0.0216 -0.0286
 + - param set #6 has cost=-0.217951
 + -- Parameters = 0.3030 0.4265 0.4923 -0.2538 -0.6916 -0.0710 1.0031 1.0118 0.9861 0.0102 -0.0003 -0.0221
 + - param set #7 has cost=-0.218764
 + -- Parameters = -0.2737 1.1889 0.5105 -0.9380 -0.7425 -0.4220 0.9989 1.0242 0.9759 -0.0146 0.0052 -0.0163
 + - param set #8 has cost=-0.239809
 + -- Parameters = -0.1434 0.7944 1.0905 -0.8487 0.2489 -0.5914 0.9962 1.0114 0.9833 0.0006 0.0129 0.0033
 + - param set #9 has cost=-0.208710
 + -- Parameters = -0.9776 1.2170 0.4702 -1.0348 -0.4299 0.5239 0.9993 1.0211 0.9787 -0.0161 -0.0145 -0.0120
 + - param set #10 has cost=-0.195670
 + -- Parameters = 0.2194 1.3227 1.7150 -0.6369 2.5596 -0.6821 0.9997 1.0047 0.9829 -0.0057 0.0133 0.0527
 + - param set #11 has cost=-0.065947
 + -- Parameters = 1.8063 0.7268 1.0023 0.3640 -0.5330 -1.5665 0.9717 1.0171 0.9808 0.0288 0.0432 -0.0090
 + - param set #12 has cost=0.104847
 + -- Parameters = -2.1313 0.6546 1.1649 -0.9282 4.4162 2.7128 0.9836 0.9808 0.9965 -0.0275 -0.0859 0.0750
 + - sorting parameter sets by cost
 + - scanning for distances from #1
 + --- dist(#2,#1) = 0.0361 
 + --- dist(#3,#1) = 0.00887 XXX
 + --- dist(#4,#1) = 0.0761 
 + --- dist(#5,#1) = 0.0946 
 + --- dist(#6,#1) = 0.12 
 + --- dist(#7,#1) = 0.0749 
 + --- dist(#8,#1) = 0.15 
 + --- dist(#9,#1) = 0.216 
 + --- dist(#10,#1) = 0.212 
 + --- dist(#11,#1) = 0.368 
 + - cast out 1 parameter set for being too close to best set
 + - Total coarse refinement net CPU time = 0.0 s; 3486 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 12 cases
 +  - histogram: source clip 283.946 .. 1095.32; base clip 226.792 .. 865.304
 +  - versus source range 0 .. 947.74; base range 0 .. 1046.89
 + 37853 total points stored in 394 'RHDD(12.0364)' bloks
 + - cost(#1)=-0.216401 *
 + -- Parameters = -0.0751 0.9887 0.9202 -0.5595 0.6343 -0.0255 0.9974 1.0120 0.9938 -0.0032 -0.0040 0.0047
 + - cost(#2)=-0.217126 *
 + -- Parameters = 0.0580 0.8587 0.9617 -0.5511 0.6484 -0.2472 0.9992 1.0092 0.9945 0.0015 0.0040 0.0055
 + - cost(#3)=-0.212231  
 + -- Parameters = -0.0610 0.7601 0.7803 -0.6300 0.7768 -0.2095 1.0034 1.0075 0.9953 -0.0010 0.0032 0.0052
 + - cost(#4)=-0.196510  
 + -- Parameters = -0.1434 0.7944 1.0905 -0.8487 0.2489 -0.5914 0.9962 1.0114 0.9833 0.0006 0.0129 0.0033
 + - cost(#5)=-0.170962  
 + -- Parameters = -0.2737 1.1889 0.5105 -0.9380 -0.7425 -0.4220 0.9989 1.0242 0.9759 -0.0146 0.0052 -0.0163
 + - cost(#6)=-0.175088  
 + -- Parameters = 0.3030 0.4265 0.4923 -0.2538 -0.6916 -0.0710 1.0031 1.0118 0.9861 0.0102 -0.0003 -0.0221
 + - cost(#7)=-0.160719  
 + -- Parameters = -0.9776 1.2170 0.4702 -1.0348 -0.4299 0.5239 0.9993 1.0211 0.9787 -0.0161 -0.0145 -0.0120
 + - cost(#8)=-0.158272  
 + -- Parameters = 0.1663 0.3581 0.4686 -0.7408 -0.8904 -0.7947 0.9966 1.0135 0.9931 -0.0086 0.0216 -0.0286
 + - cost(#9)=-0.157386  
 + -- Parameters = 0.2194 1.3227 1.7150 -0.6369 2.5596 -0.6821 0.9997 1.0047 0.9829 -0.0057 0.0133 0.0527
 + - cost(#10)=-0.032056  
 + -- Parameters = 1.8063 0.7268 1.0023 0.3640 -0.5330 -1.5665 0.9717 1.0171 0.9808 0.0288 0.0432 -0.0090
 + - cost(#11)=0.134389  
 + -- Parameters = -2.1313 0.6546 1.1649 -0.9282 4.4162 2.7128 0.9836 0.9808 0.9965 -0.0275 -0.0859 0.0750
 + - cost(#12)=0.380625  
 + -- Parameters = -0.5230 1.5722 -1.0527 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 12 cases
 + - cost(#1)=-0.220486 *
 + -- Parameters = -0.0904 1.0064 0.9298 -0.5618 0.6266 -0.0357 0.9989 1.0122 0.9934 0.0003 -0.0012 0.0050
 + - cost(#2)=-0.217865  
 + -- Parameters = 0.0561 0.8234 1.0115 -0.5676 0.6262 -0.2636 0.9993 1.0095 0.9943 0.0015 0.0040 0.0057
 + - cost(#3)=-0.216088  
 + -- Parameters = -0.0230 0.8053 0.8004 -0.6129 0.7952 -0.2754 0.9997 1.0085 0.9945 -0.0010 0.0030 0.0057
 + - cost(#4)=-0.215743  
 + -- Parameters = 0.0810 0.9959 0.9824 -0.6645 0.4097 -0.5549 0.9981 1.0138 0.9900 -0.0017 0.0120 0.0033
 + - cost(#5)=-0.200934  
 + -- Parameters = -0.1192 1.1158 0.7064 -0.7424 -0.4163 -0.4100 0.9985 1.0214 0.9876 -0.0044 0.0052 -0.0138
 + - cost(#6)=-0.193281  
 + -- Parameters = -0.0471 0.6202 0.6356 -0.5562 -0.5567 -0.0915 1.0013 1.0147 0.9906 0.0047 -0.0016 -0.0187
 + - cost(#7)=-0.178429  
 + -- Parameters = -0.5316 1.1207 0.5964 -0.7543 -0.3507 0.2919 1.0013 1.0214 0.9799 -0.0131 -0.0147 -0.0096
 + - cost(#8)=-0.189605  
 + -- Parameters = 0.1218 0.5096 0.6845 -0.6251 -0.6662 -0.4718 1.0005 1.0141 0.9914 -0.0022 0.0094 -0.0207
 + - cost(#9)=-0.161641  
 + -- Parameters = 0.1666 1.2401 1.6859 -0.5940 2.5803 -0.5493 0.9994 1.0044 0.9833 -0.0021 0.0134 0.0527
 + - cost(#10)=-0.123158  
 + -- Parameters = 1.3209 0.9227 0.9080 -0.0518 -0.2649 -1.5517 0.9928 1.0175 0.9870 0.0196 0.0354 -0.0094
 + - cost(#11)=0.056609  
 + -- Parameters = -1.4237 1.5257 1.6216 -1.0346 3.4734 1.1983 0.9848 1.0054 0.9870 -0.0324 -0.0594 0.0693
 + - cost(#12)=-0.221138 *
 + -- Parameters = -0.0431 1.0835 1.1658 -0.5855 0.5847 -0.1840 1.0001 1.0135 0.9929 -0.0001 0.0003 0.0078
 + - case #12 is now the best
 + - Initial  cost = -0.221138
 + - Initial fine Parameters = -0.0431 1.0835 1.1658 -0.5855 0.5847 -0.1840 1.0001 1.0135 0.9929 -0.0001 0.0003 0.0078
 + - Finalish cost = -0.221315 ; 127 funcs
 + - ini Finalish Parameters = -0.0277 1.0946 1.1722 -0.5857 0.5957 -0.1746 1.0002 1.0135 0.9930 -0.0002 0.0004 0.0078
 +  - Set lpc+ parameters back to purity before Final iterations
 +  - histogram: source clip 283.476 .. 1095.72; base clip 226.792 .. 865.304
 +  - versus source range 0 .. 947.74; base range 0 .. 1046.89
*[#15431=-0.761295] *[#15513=-0.761337] *[#15516=-0.761344] *[#15517=-0.761432] *[#15518=-0.761435] *[#15520=-0.761475] *[#15525=-0.76153] *[#15526=-0.761585] *[#15529=-0.761634] *[#15530=-0.761636] *[#15532=-0.76165] *[#15538=-0.761662] *[#15543=-0.761726] *[#15544=-0.761765] *[#15546=-0.761767] *[#15547=-0.761772] *[#15549=-0.761786] *[#15554=-0.761819] *[#15561=-0.76184] *[#15564=-0.761843] *[#15571=-0.761857] *[#15576=-0.761864] *[#15581=-0.761876] *[#15586=-0.761879] *[#15588=-0.761891] *[#15591=-0.761905] *[#15593=-0.761913] *[#15594=-0.761916] *[#15595=-0.761921] *[#15598=-0.761968] *[#15601=-0.761974] *[#15602=-0.761995] *[#15606=-0.762006] *[#15609=-0.762031] *[#15612=-0.762042] *[#15613=-0.762049] *[#15614=-0.762062] *[#15615=-0.762062] *[#15617=-0.762071] *[#15618=-0.762083] *[#15623=-0.762093] *[#15626=-0.762115] *[#15627=-0.762134] *[#15628=-0.762145] *[#15629=-0.762178] *[#15632=-0.76218] *[#15635=-0.7622] *[#15636=-0.762222] *[#15638=-0.762288] *[#15649=-0.762299] *[#15650=-0.762304] *[#15651=-0.762313] *[#15656=-0.762315] *[#15657=-0.762321] *[#15658=-0.762323] *[#15659=-0.762326] *[#15662=-0.762336] *[#15665=-0.762342] *[#15666=-0.762357] *[#15667=-0.762362] *[#15670=-0.762372] *[#15673=-0.762379] *[#15674=-0.762381] *[#15675=-0.762384] *[#15686=-0.762392] *[#15709=-0.762401] *[#15711=-0.762409] *[#15714=-0.762417] *[#15715=-0.762421] *[#15720=-0.762425] *[#15725=-0.76243] *[#15728=-0.762438] *[#15731=-0.762439] *[#15733=-0.762441] *[#15734=-0.762447] *[#15741=-0.762448] *[#15742=-0.762451] *[#15743=-0.762458] *[#15746=-0.762459] *[#15750=-0.762467] *[#15751=-0.762471] *[#15762=-0.762478] *[#15765=-0.762484] *[#15768=-0.76249] *[#15769=-0.762492] *[#15770=-0.762492] *[#15772=-0.762505] *[#15777=-0.762507] *[#15778=-0.76251] *[#15779=-0.762513] *[#15780=-0.762515] *[#15783=-0.762518] *[#15784=-0.762519] *[#15786=-0.762521] *[#15789=-0.762523] *[#15796=-0.762524] *[#15798=-0.762526] *[#15815=-0.76253] *[#15816=-0.762532] *[#15817=-0.762534] *[#15826=-0.762536] *[#15831=-0.762537] *[#15832=-0.762539] *[#15842=-0.762539] *[#15843=-0.762541] *[#15852=-0.762544] *[#15877=-0.762546] *[#15878=-0.762547] *[#15881=-0.762548] *[#15892=-0.762548] *[#15896=-0.762552] *[#15907=-0.762553] *[#15914=-0.762555] *[#15929=-0.762557] *[#15947=-0.762557] *[#15949=-0.762558] *[#15954=-0.762558] *[#15955=-0.762558] *[#15965=-0.762559] *[#15974=-0.762559] *[#15978=-0.762559] *[#15993=-0.76256] *[#15994=-0.76256] *[#15999=-0.76256] *[#16022=-0.76256] *[#16036=-0.76256] *[#16051=-0.76256] 
 + - Final    cost = -0.762560 ; 642 funcs
 + Final fine fit Parameters:
       x-shift= -0.0839   y-shift=  1.2121   z-shift=  1.1016  ...  enorm=  1.6401 mm
       z-angle= -0.6217   x-angle=  0.5793   y-angle= -0.1782  ...  total=  0.8691 deg
       x-scale=  1.0015   y-scale=  1.0155   z-scale=  0.9959  ...  vol3D=  1.0128 = base smaller than source
     y/x-shear= -0.0008 z/x-shear=  0.0006 z/y-shear=  0.0053
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = -0.0839 1.2121 1.1016 -0.6217 0.5793 -0.1782 1.0015 1.0155 0.9959 -0.0008 0.0006 0.0053
++ Unloading unneeded data
++ Wrote -1Dmatrix_save ./anatSS.sub-S12_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 66.6
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
#Script is running (command trimmed):
  3dLRflip -prefix ./__tt_anatSS.sub-S12_lr_al_junk -overwrite ./anatSS.sub-S12_unflipped_ob+orig
++ processing ./anatSS.sub-S12_unflipped_ob+orig ...
#Script is running (command trimmed):
  3dAllineate -lpc+ZZ -weight ./vr_base_ts_ns_wt+orig -source ./__tt_anatSS.sub-S12_lr_al_junk+orig -prefix ./anatSS.sub-S12_flip_al_junk -base ./vr_base_ts_ns+orig -cmass -1Dmatrix_save ./anatSS.sub-S12_flip__al_junk_mat.aff12.1D -master BASE -mast_dxyz 1.000000 -weight_frac 1.0 -maxrot 6 -maxshf 10 -VERB -warp aff -source_automask+4 -twobest 11 -twopass -VERB -maxrot 45 -maxshf 40 -fineblur 1 -source_automask+2 
++ 3dAllineate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_ts_ns_wt+orig.BRIK is 13.020722 degrees from plumb.
++ Oblique dataset:./vr_base_ts_ns+orig.BRIK is 13.020722 degrees from plumb.
++ Source dataset: ./__tt_anatSS.sub-S12_lr_al_junk+orig.HEAD
++ Base dataset:   ./vr_base_ts_ns+orig.HEAD
++ Loading datasets into memory
++ 1607614 voxels in -source_automask+2
++ Zero-pad: ybot=8 ytop=3
++ Zero-pad: zbot=8 ztop=8
++ 42434 voxels [18.4%] in weight mask
++ Number of points for matching = 42434
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
 +     - It is nothing to worry about: 3dAllineate aligns based on coordinates.
 +     - But it is always important to check the alignment visually to be sure.
++ Local correlation: blok type = 'RHDD(11.9925)'
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 30.634 38.038 24.194 (index)
 + source center of mass = 138.263 173.610 194.387 (index)
 + source-target CM = 0.003 1.572 -1.053 (xyz)
 + estimated center of mass shifts = 0.003 1.572 -1.053
++ shift param auto-range: -60.7..60.7 -69.7..72.8 -57.6..55.5
 + Range param#4 [z-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#1 [x-shift] = -9.996925 .. 10.003075  center = 0.003075
 + Range param#2 [y-shift] = -8.427784 .. 11.572216  center = 1.572216
 + Range param#3 [z-shift] = -11.052666 .. 8.947334  center = -1.052666
 + Range param#4 [z-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#1 [x-shift] = -39.996925 .. 40.003075  center = 0.003075
 + Range param#2 [y-shift] = -38.427784 .. 41.572216  center = 1.572216
 + Range param#3 [z-shift] = -41.052666 .. 38.947334  center = -1.052666
 + 12 free parameters
++ Normalized convergence radius = 0.0000092
++ Final parameter search ranges:
 +       x-shift =  -39.997 ..   40.003
 +       y-shift =  -38.428 ..   41.572
 +       z-shift =  -41.053 ..   38.947
 +       z-angle =  -45.000 ..   45.000
 +       x-angle =  -45.000 ..   45.000
 +       y-angle =  -45.000 ..   45.000
 +       x-scale =    0.833 ..    1.200
 +       y-scale =    0.833 ..    1.200
 +       z-scale =    0.833 ..    1.200
 +     y/x-shear =   -0.111 ..    0.111
 +     z/x-shear =   -0.111 ..    0.111
 +     z/y-shear =   -0.111 ..    0.111
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 15
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1607614 [out of 27642384] voxels
 + base mask has 56057 [out of 230400] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=3.75
 + - Smoothing source; radius=3.75
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - copying weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 271.197 .. 1040.21; base clip 225.2 .. 812.844
 +  - versus source range 0.55725 .. 947.568; base range 0 .. 1040.32
 + 37683 total points stored in 342 'RHDD(12.5651)' bloks
 + - number of free params = 6
 + - Test (64+61)*64 params [top5=*o+-.]:#o++.o++.+.-+-o--.-.-.+-$ + - best 45 costs found:
    0 v= 0.428595:   0.00   1.57  -1.05   0.00   0.00   0.00  [grid]
    1 v= 0.672442: -13.33  14.91 -14.39 -15.00  15.00 -15.00  [grid]
    2 v= 0.677346: -13.33 -25.09  12.28 -30.00 -15.00 -15.00  [grid]
    3 v= 0.706339:  13.34 -11.76  12.28 -15.00 -15.00 -30.00  [grid]
    4 v= 0.712511:  13.34  14.91 -14.39  15.00  15.00  15.00  [grid]
    5 v= 0.722162:  26.67  14.91 -27.72  15.00  15.00 -15.00  [grid]
    6 v= 0.727441: -10.32 -27.24  13.96 -30.67 -17.79 -20.52  [rand]
    7 v= 0.731427:  13.34 -25.09  12.28 -15.00 -15.00 -30.00  [grid]
    8 v= 0.735934:  13.34 -25.09  12.28  30.00 -15.00  15.00  [grid]
    9 v= 0.746864:  26.67 -11.76  12.28  15.00 -15.00 -15.00  [grid]
   10 v= 0.750181: -13.33 -11.76  12.28  15.00 -15.00  30.00  [grid]
   11 v= 0.759270: -26.66  14.91 -27.72 -15.00  15.00  15.00  [grid]
   12 v= 0.761610: -26.66 -11.76  12.28 -15.00 -15.00  15.00  [grid]
   13 v= 0.762242:  -8.64 -18.86  16.42 -25.20 -18.50 -13.54  [rand]
   14 v= 0.762588: -15.98 -17.92   4.67 -20.53  -3.14 -10.08  [rand]
   15 v= 0.776948: -18.33 -24.57   4.99  -6.51 -20.18   7.56  [rand]
   16 v= 0.778815:   8.64 -18.86  16.42  25.20 -18.50  13.54  [rand]
   17 v= 0.781712:  32.49 -13.12 -12.86  11.16  -9.40 -34.39  [rand]
   18 v= 0.783232:  26.67  14.91 -27.72  15.00  15.00 -30.00  [grid]
   19 v= 0.796887: -32.48 -13.12 -12.86 -11.16  -9.40  34.39  [rand]
   20 v= 0.798550: -26.66  14.91 -27.72 -15.00  15.00  30.00  [grid]
   21 v= 0.818285: -13.33  14.91 -27.72 -15.00  30.00 -30.00  [grid]
   22 v= 0.826027:  10.33 -27.24  13.96  30.67 -17.79  20.52  [rand]
   23 v= 0.827384: -13.33 -25.09  12.28  15.00 -15.00  30.00  [grid]
   24 v= 0.828730: -13.33  14.91 -27.72 -15.00  30.00 -15.00  [grid]
   25 v= 0.842141:  26.31 -24.38  16.74 -15.82 -17.65 -37.25  [rand]
   26 v= 0.863151:  13.34  14.91 -27.72  15.00  30.00  30.00  [grid]
   27 v= 0.866320:  13.34  14.91 -27.72  15.00  30.00  15.00  [grid]
   28 v= 0.869899:  18.33 -24.57   4.99   6.51 -20.18  -7.56  [rand]
   29 v= 0.870379: -15.29  22.46 -31.44 -14.56  29.40 -15.92  [rand]
   30 v= 0.872029:  13.42  24.26 -32.39   4.37  20.12 -15.12  [rand]
   31 v= 0.875075: -13.33 -25.09  25.61 -30.00 -15.00 -15.00  [grid]
   32 v= 0.875999: -26.66 -25.09  12.28 -15.00 -15.00  15.00  [grid]
   33 v= 0.876852: -16.21  15.68 -36.18 -15.74  34.09  -7.78  [rand]
   34 v= 0.880385:  34.87 -28.98  14.72 -11.68 -29.04 -39.38  [rand]
   35 v= 0.887290:  26.67 -25.09  12.28  15.00 -15.00 -15.00  [grid]
   36 v= 0.892270: -34.86 -28.98  14.72  11.68 -29.04  39.38  [rand]
   37 v= 0.900671: -26.66  14.91 -27.72 -30.00  30.00 -15.00  [grid]
   38 v= 0.904601: -26.30 -24.38  16.74  15.82 -17.65  37.25  [rand]
   39 v= 0.907865:  15.99 -17.92   4.67  20.53  -3.14  10.08  [rand]
   40 v= 0.911356:  16.22  15.68 -36.18  15.74  34.09   7.78  [rand]
   41 v= 0.917391: -33.77 -30.35   6.66 -12.26 -17.56  17.80  [rand]
   42 v= 0.926869: -23.53  10.12 -17.02 -26.66  31.62 -32.06  [rand]
   43 v= 0.930401:  26.67  14.91 -14.39  15.00  15.00 -15.00  [grid]
   44 v= 0.932987:  15.29  22.46 -31.44  14.56  29.40  15.92  [rand]
 + - A little optimization:*[#8004=0.320449] *[#8013=0.305749] *[#8015=0.294615] *[#8022=0.293793] ...................................*[#9974=0.272534] *[#9979=0.271517] *[#9980=0.267526] *[#9981=0.266559] *[#9984=0.264586] *[#9986=0.26421] ..........
 + - costs of the above after a little optimization:
    0 v= 0.293793:  -0.75   1.06   2.32   0.05   0.02  -0.17  [grid]
    1 v= 0.394909:  -3.24  10.39  -7.36  -1.34   8.43   0.49  [grid]
    2 v= 0.638878: -12.65 -22.99  15.98 -27.25 -15.27 -15.51  [grid]
    3 v= 0.613323:  13.69 -14.14   9.33 -13.81 -11.52 -30.11  [grid]
    4 v= 0.466922:   6.44   9.40 -17.57   5.15  13.40   2.31  [grid]
    5 v= 0.521696:  14.02   7.54 -12.66   3.88   8.38 -16.27  [grid]
    6 v= 0.660810:  -9.72 -27.28  17.36 -28.86 -18.28 -18.44  [rand]
    7 v= 0.333071:  11.86  -3.32   4.72   6.37  -3.83  -5.58  [grid]
    8 v= 0.632865:  12.03 -19.38  16.67  17.02 -16.73   6.50  [grid]
    9 v= 0.422823:  13.95  -6.57   6.33   6.65  -6.00  -8.32  [grid]
   10 v= 0.513010: -10.55 -12.23   8.03   0.05 -11.37  10.56  [grid]
   11 v= 0.631730: -25.92   9.19 -19.95 -15.26  12.45  10.94  [grid]
   12 v= 0.300029:   1.47  -2.44   3.00   2.75  -1.71   1.82  [grid]
   13 v= 0.608107: -10.34 -19.48  13.13 -21.17 -14.17 -12.75  [rand]
   14 v= 0.441152:  -7.37 -13.83  11.36  -4.66 -10.15   0.99  [rand]
   15 v= 0.561411: -15.58 -22.99  10.05  -9.79 -17.63   5.30  [rand]
   16 v= 0.659740:   8.12 -18.41  14.96  20.92 -15.04  13.29  [rand]
   17 v= 0.680118:  34.14 -11.36  -7.08   5.12  -9.00 -37.37  [rand]
   18 v= 0.492105:  14.96  11.59 -12.17   8.19  10.60  -5.76  [grid]
   19 v= 0.637148: -35.23  -7.58  -9.56 -10.44  -5.57  27.34  [rand]
   20 v= 0.661194: -25.11   6.96 -26.00 -10.10  11.35  28.86  [grid]
   21 v= 0.475748:  -7.59  -4.09  -1.01  -6.67   1.26  -2.84  [grid]
   22 v= 0.725098:   9.05 -25.48  17.13  29.38 -17.11  18.57  [rand]
   23 v= 0.654242: -13.84 -20.77  11.04  14.36 -17.16  26.24  [grid]
   24 v= 0.654136: -12.40  10.64 -24.16 -13.39  21.09 -11.07  [grid]
   25 v= 0.681520:  22.19 -19.13  13.61 -17.38 -16.33 -37.28  [rand]
   26 v= 0.762880:   8.41  13.52 -25.31  14.13  24.33  25.53  [grid]
   27 v= 0.481928:   7.65  10.59 -21.08   4.00  14.76  -6.52  [grid]
   28 v= 0.597426:  16.96 -22.36  11.69   4.76 -16.88 -10.39  [rand]
   29 v= 0.754172: -13.82  16.98 -31.69 -13.68  27.13 -12.95  [rand]
   30 v= 0.547925:  14.89  12.58 -23.78   8.77  17.27  -9.01  [rand]
   31 v= 0.629639:  -3.85 -24.66  16.52 -20.64 -17.67 -17.48  [grid]
   32 v= 0.551112: -20.51 -18.34   7.07 -10.31 -13.89   9.75  [grid]
   33 v= 0.724921: -16.60  14.04 -30.76 -13.55  26.00  -4.25  [rand]
   34 v= 0.689388:  24.80 -26.00  10.24  -9.60 -21.92 -32.17  [rand]
  *35 v= 0.264210:   8.85  -0.19   1.65   5.03  -0.24  -3.82  [grid]
   36 v= 0.574903: -17.61 -15.09   6.92  -2.76 -11.70  15.54  [rand]
   37 v= 0.720946: -22.11   9.45 -26.96 -22.27  24.26  -7.58  [grid]
   38 v= 0.709176: -23.22 -26.80  10.39  13.27 -21.49  32.57  [rand]
   39 v= 0.266131:   6.38  -4.14   5.19   3.05  -3.42  -3.88  [rand]
   40 v= 0.829697:  15.57  14.15 -35.54  15.09  30.29   8.53  [rand]
   41 v= 0.513072: -18.38  -5.36   0.59  -6.23  -2.51   7.65  [rand]
   42 v= 0.684322: -15.21   6.27 -15.77 -23.53  19.48 -21.81  [rand]
   43 v= 0.379607:  11.42   6.35  -4.88   5.38   5.14  -6.67  [grid]
   44 v= 0.793634:  14.65  15.65 -30.27  15.40  27.27  12.25  [rand]
 + - save #35 for possible use in twobest
 + - skip #39 for twobest: too close to set #35
 + - save # 0 for possible use in twobest
 + - skip #12 for twobest: too close to set # 0
 + - skip # 7 for twobest: too close to set #35
 + - save #43 for possible use in twobest
 + - save # 1 for possible use in twobest
 + - skip # 9 for twobest: too close to set # 7
 + - save #14 for possible use in twobest
 + - save # 4 for possible use in twobest
 + - save #21 for possible use in twobest
 + - save #27 for possible use in twobest
 + - save #18 for possible use in twobest
 + - save #10 for possible use in twobest
 + - save #41 for possible use in twobest
 + - save # 5 for possible use in twobest
 + - save #30 for possible use in twobest
 + - save #32 for possible use in twobest
 + - save #15 for possible use in twobest
 + - save #36 for possible use in twobest
 + - save #28 for possible use in twobest
 + - save #13 for possible use in twobest
 + - save # 3 for possible use in twobest
 + - save #31 for possible use in twobest
 + - save #11 for possible use in twobest
 + - save # 8 for possible use in twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=2.92
 + - Smoothing source; radius=2.92
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 274.165 .. 1052.69; base clip 225.915 .. 828.044
 +  - versus source range 0.0485157 .. 947.27; base range 0 .. 1043.53
 + 36921 total points stored in 354 'RHDD(12.342)' bloks
 + - param set #1 has cost=0.265917
 + -- Parameters = 7.8298 -0.7102 1.3676 4.9366 -0.3461 -2.3139 0.9863 1.0061 0.9932 -0.0076 0.0116 0.0018
 + - param set #2 has cost=0.312398
 + -- Parameters = -0.6763 0.6999 1.6701 0.1168 -0.1305 -0.0498 0.9986 1.0158 0.9987 -0.0009 0.0008 -0.0012
 + - param set #3 has cost=0.304819
 + -- Parameters = 6.8814 2.2976 -3.3960 4.5141 4.4627 -2.5080 1.0037 0.9862 1.0065 0.0028 0.0079 0.0053
 + - param set #4 has cost=0.303007
 + -- Parameters = 3.3163 4.5260 -4.7573 2.9594 5.9980 0.0556 0.9924 1.0019 0.9889 -0.0342 -0.0291 0.0186
 + - param set #5 has cost=0.372244
 + -- Parameters = -1.3389 -11.4959 8.8618 0.1229 -7.6030 0.3922 0.9788 0.9962 0.9892 -0.0082 0.0178 0.0163
 + - param set #6 has cost=0.444489
 + -- Parameters = 6.1849 9.8558 -16.3226 4.3702 11.8664 -0.8159 0.9730 1.0103 0.9806 -0.0047 0.0173 -0.0036
 + - param set #7 has cost=0.384190
 + -- Parameters = -2.8702 -7.3990 3.3506 -2.4680 -3.1349 -2.0528 0.9789 0.9640 0.9720 0.0069 -0.0070 -0.0066
 + - param set #8 has cost=0.358366
 + -- Parameters = 4.0815 9.8218 -6.8585 3.0617 10.2239 -0.6239 1.0137 1.0133 0.9599 -0.0367 0.0039 0.0602
 + - param set #9 has cost=0.405427
 + -- Parameters = 11.1567 2.6757 -10.6083 7.6214 7.9149 -1.1642 0.9832 0.9806 0.9719 0.0066 -0.0078 0.0045
 + - param set #10 has cost=0.402022
 + -- Parameters = -5.6437 -8.9860 8.0171 -1.4154 -7.4672 1.8134 0.9990 1.0200 0.9816 -0.0079 0.0032 0.0013
 + - param set #11 has cost=0.408845
 + -- Parameters = -6.9503 -0.9566 -3.3848 -2.3247 2.6013 2.7147 0.9655 0.9529 0.9728 0.0106 0.0235 -0.0203
 + - param set #12 has cost=0.326060
 + -- Parameters = -0.5864 1.2707 2.1424 -0.0288 0.1506 -0.2410 0.9992 1.0019 1.0001 -0.0001 -0.0001 0.0001
 + - sorting parameter sets by cost
 + - scanning for distances from #1
 + --- dist(#2,#1) = 0.183 
 + --- dist(#3,#1) = 0.0595 
 + --- dist(#4,#1) = 0.106 
 + --- dist(#5,#1) = 0.105 
 + --- dist(#6,#1) = 0.263 
 + --- dist(#7,#1) = 0.135 
 + --- dist(#8,#1) = 0.134 
 + --- dist(#9,#1) = 0.168 
 + --- dist(#10,#1) = 0.15 
 + --- dist(#11,#1) = 0.185 
 + --- dist(#12,#1) = 0.221 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=2.27
 + - Smoothing source; radius=2.27
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 278.632 .. 1067.47; base clip 226.345 .. 848.275
 +  - versus source range 0.000285716 .. 947.368; base range 0 .. 1044.59
 + 37192 total points stored in 368 'RHDD(12.2051)' bloks
 + - param set #1 has cost=0.298807
 + -- Parameters = 6.7850 -0.2998 1.4325 4.1653 -0.3514 -2.4155 0.9888 1.0106 0.9936 -0.0113 0.0150 0.0018
 + - param set #2 has cost=0.323211
 + -- Parameters = 4.0072 3.8770 -3.2313 3.3317 4.9301 0.3671 0.9838 1.0049 0.9871 -0.0307 -0.0312 0.0245
 + - param set #3 has cost=0.327275
 + -- Parameters = 6.8202 1.8111 -3.1655 4.3914 3.9648 -1.8955 0.9994 0.9906 0.9994 0.0009 0.0079 0.0064
 + - param set #4 has cost=0.318842
 + -- Parameters = 1.5808 -0.6847 1.3057 0.9850 -1.2741 -1.5249 0.9835 1.0253 0.9653 0.0025 0.0198 0.0036
 + - param set #5 has cost=0.359387
 + -- Parameters = -0.4955 1.1958 1.7554 0.0403 0.1126 -0.2736 0.9969 1.0119 0.9990 -0.0007 -0.0003 -0.0000
 + - param set #6 has cost=0.372472
 + -- Parameters = 4.5643 8.6294 -6.3705 2.6820 9.4385 -2.5546 1.0103 1.0112 0.9666 -0.0322 0.0025 0.0635
 + - param set #7 has cost=0.376231
 + -- Parameters = 1.2303 -8.6407 8.7724 0.3242 -6.1885 -2.0112 0.9774 1.0049 0.9913 0.0036 0.0154 0.0219
 + - param set #8 has cost=0.337643
 + -- Parameters = 1.6925 -8.0007 3.4718 1.6741 -3.5623 -0.0583 0.9888 0.9648 0.9684 0.0038 -0.0077 -0.0081
 + - param set #9 has cost=0.316604
 + -- Parameters = 4.2074 -5.9310 4.0472 2.7991 -4.9257 -1.1056 0.9995 1.0122 0.9416 -0.0059 0.0051 0.0003
 + - param set #10 has cost=0.358867
 + -- Parameters = 6.6846 0.5745 -6.8930 4.4237 5.7812 -1.6047 0.9741 0.9540 0.9698 0.0101 -0.0055 -0.0013
 + - param set #11 has cost=0.360991
 + -- Parameters = 2.6410 -0.5214 -1.9644 1.4568 1.8224 -1.4843 0.9716 0.9793 0.9950 0.0160 0.0166 -0.0165
 + - param set #12 has cost=0.414239
 + -- Parameters = 4.5782 8.3689 -10.1324 2.8401 9.2282 -2.8662 0.9743 0.9882 0.9771 0.0133 0.0191 -0.0001
 + - sorting parameter sets by cost
 + - scanning for distances from #1
 + --- dist(#2,#1) = 0.141 
 + --- dist(#3,#1) = 0.077 
 + --- dist(#4,#1) = 0.208 
 + --- dist(#5,#1) = 0.0575 
 + --- dist(#6,#1) = 0.125 
 + --- dist(#7,#1) = 0.154 
 + --- dist(#8,#1) = 0.091 
 + --- dist(#9,#1) = 0.123 
 + --- dist(#10,#1) = 0.278 
 + --- dist(#11,#1) = 0.104 
 + --- dist(#12,#1) = 0.145 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.76
 + - Smoothing source; radius=1.76
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + - using 42434 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 280.538 .. 1078.27; base clip 226.792 .. 865.304
 +  - versus source range 0 .. 947.374; base range 0 .. 1046.55
 + 38252 total points stored in 392 'RHDD(12.1215)' bloks
 + - param set #1 has cost=0.326350
 + -- Parameters = 6.3788 -0.1816 0.9736 3.8941 -0.5947 -2.2182 0.9933 1.0194 0.9711 -0.0205 0.0142 0.0028
 + - param set #2 has cost=0.347354
 + -- Parameters = 4.0579 -5.1304 3.5652 2.5533 -4.5403 -1.4050 0.9853 1.0148 0.9355 -0.0047 0.0013 -0.0001
 + - param set #3 has cost=0.329895
 + -- Parameters = 3.9667 -0.5305 1.1498 2.1716 -1.2336 -2.0161 0.9714 1.0253 0.9645 -0.0056 0.0168 0.0003
 + - param set #4 has cost=0.342580
 + -- Parameters = 4.3684 2.6358 -2.1464 3.3816 4.1153 -0.3406 0.9799 1.0070 0.9815 -0.0340 -0.0352 0.0358
 + - param set #5 has cost=0.347535
 + -- Parameters = 6.4223 0.4505 -1.3286 4.0916 2.4583 -1.5264 0.9952 1.0006 0.9901 -0.0026 0.0126 0.0139
 + - param set #6 has cost=0.362306
 + -- Parameters = 2.3090 -7.1602 2.7698 1.9320 -3.4406 -0.5381 0.9695 0.9787 0.9711 0.0011 -0.0098 -0.0134
 + - param set #7 has cost=0.366113
 + -- Parameters = 7.2544 -1.0520 -3.2792 5.1843 3.7729 -1.3148 0.9834 0.9589 0.9762 0.0156 -0.0080 0.0133
 + - param set #8 has cost=0.354491
 + -- Parameters = 1.1471 0.8121 1.3375 1.3202 -0.7494 -0.4789 0.9776 1.0369 0.9720 -0.0013 -0.0081 0.0026
 + - param set #9 has cost=0.360594
 + -- Parameters = 3.9791 -1.8373 -1.7788 2.2742 1.2579 -1.8251 0.9779 0.9882 0.9905 -0.0012 0.0171 -0.0058
 + - param set #10 has cost=0.367496
 + -- Parameters = 3.0843 6.6187 -2.0404 2.4354 6.7876 -0.7446 0.9682 1.0115 0.9755 -0.0337 -0.0007 0.0660
 + - param set #11 has cost=0.366720
 + -- Parameters = 2.8349 -6.2632 6.0308 1.2089 -5.2023 -2.1019 0.9985 1.0158 0.9686 -0.0035 0.0193 0.0056
 + - param set #12 has cost=0.423213
 + -- Parameters = 4.9003 7.0911 -8.4478 3.1053 7.7454 -2.3128 0.9763 0.9963 0.9799 0.0195 0.0219 -0.0006
 + - sorting parameter sets by cost
 + - scanning for distances from #1
 + --- dist(#2,#1) = 0.0671 
 + --- dist(#3,#1) = 0.222 
 + --- dist(#4,#1) = 0.0966 
 + --- dist(#5,#1) = 0.0805 
 + --- dist(#6,#1) = 0.1 
 + --- dist(#7,#1) = 0.0867 
 + --- dist(#8,#1) = 0.111 
 + --- dist(#9,#1) = 0.165 
 + --- dist(#10,#1) = 0.0767 
 + --- dist(#11,#1) = 0.285 
 + --- dist(#12,#1) = 0.18 
 + - Total coarse refinement net CPU time = 0.0 s; 3427 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=31.7119 usiz=518.121
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 13 cases
 +  - histogram: source clip 284.298 .. 1095.25; base clip 226.792 .. 865.304
 +  - versus source range 0 .. 947.74; base range 0 .. 1046.89
 + 37853 total points stored in 394 'RHDD(12.0364)' bloks
 + - cost(#1)=0.346093 *
 + -- Parameters = 6.3788 -0.1816 0.9736 3.8941 -0.5947 -2.2182 0.9933 1.0194 0.9711 -0.0205 0.0142 0.0028
 + - cost(#2)=0.349190  
 + -- Parameters = 3.9667 -0.5305 1.1498 2.1716 -1.2336 -2.0161 0.9714 1.0253 0.9645 -0.0056 0.0168 0.0003
 + - cost(#3)=0.360445  
 + -- Parameters = 4.3684 2.6358 -2.1464 3.3816 4.1153 -0.3406 0.9799 1.0070 0.9815 -0.0340 -0.0352 0.0358
 + - cost(#4)=0.366719  
 + -- Parameters = 4.0579 -5.1304 3.5652 2.5533 -4.5403 -1.4050 0.9853 1.0148 0.9355 -0.0047 0.0013 -0.0001
 + - cost(#5)=0.365123  
 + -- Parameters = 6.4223 0.4505 -1.3286 4.0916 2.4583 -1.5264 0.9952 1.0006 0.9901 -0.0026 0.0126 0.0139
 + - cost(#6)=0.373386  
 + -- Parameters = 1.1471 0.8121 1.3375 1.3202 -0.7494 -0.4789 0.9776 1.0369 0.9720 -0.0013 -0.0081 0.0026
 + - cost(#7)=0.379056  
 + -- Parameters = 3.9791 -1.8373 -1.7788 2.2742 1.2579 -1.8251 0.9779 0.9882 0.9905 -0.0012 0.0171 -0.0058
 + - cost(#8)=0.377002  
 + -- Parameters = 2.3090 -7.1602 2.7698 1.9320 -3.4406 -0.5381 0.9695 0.9787 0.9711 0.0011 -0.0098 -0.0134
 + - cost(#9)=0.383153  
 + -- Parameters = 7.2544 -1.0520 -3.2792 5.1843 3.7729 -1.3148 0.9834 0.9589 0.9762 0.0156 -0.0080 0.0133
 + - cost(#10)=0.384657  
 + -- Parameters = 2.8349 -6.2632 6.0308 1.2089 -5.2023 -2.1019 0.9985 1.0158 0.9686 -0.0035 0.0193 0.0056
 + - cost(#11)=0.386344  
 + -- Parameters = 3.0843 6.6187 -2.0404 2.4354 6.7876 -0.7446 0.9682 1.0115 0.9755 -0.0337 -0.0007 0.0660
 + - cost(#12)=0.438297  
 + -- Parameters = 4.9003 7.0911 -8.4478 3.1053 7.7454 -2.3128 0.9763 0.9963 0.9799 0.0195 0.0219 -0.0006
 + - cost(#13)=0.506508  
 + -- Parameters = 0.0031 1.5722 -1.0527 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 13 cases
 + - cost(#1)=0.339238 *
 + -- Parameters = 6.0622 0.0701 1.0081 3.6005 -0.6520 -2.2382 0.9968 1.0211 0.9707 -0.0424 0.0062 0.0017
 + - cost(#2)=0.344175  
 + -- Parameters = 4.2115 -0.6186 1.1772 2.5076 -1.4105 -1.7356 0.9723 1.0283 0.9636 -0.0139 0.0153 0.0008
 + - cost(#3)=0.356897  
 + -- Parameters = 4.6273 2.4466 -1.9860 3.3360 3.9327 -0.6091 0.9895 1.0071 0.9833 -0.0389 -0.0388 0.0354
 + - cost(#4)=0.359661  
 + -- Parameters = 4.2615 -4.8504 3.2319 2.4388 -4.0920 -1.6866 0.9846 1.0159 0.9449 -0.0062 0.0011 0.0007
 + - cost(#5)=0.361215  
 + -- Parameters = 6.3443 0.4305 -0.9293 3.9064 2.0674 -1.9385 0.9929 1.0013 0.9894 -0.0052 0.0126 0.0139
 + - cost(#6)=0.349698  
 + -- Parameters = 4.0262 0.1116 1.6514 2.3707 -1.1273 -1.8540 0.9696 1.0323 0.9777 -0.0050 -0.0083 0.0053
 + - cost(#7)=0.365827  
 + -- Parameters = 4.3393 -1.4604 -0.8530 2.5417 1.0972 -1.7192 0.9835 0.9906 0.9953 -0.0130 0.0143 -0.0031
 + - cost(#8)=0.365025  
 + -- Parameters = 3.8248 -5.1265 1.7798 2.4588 -2.9113 -1.3001 0.9868 0.9943 0.9699 0.0033 -0.0086 -0.0187
 + - cost(#9)=0.374651  
 + -- Parameters = 6.8255 -1.7270 -3.2492 4.7971 3.4670 -1.6415 0.9959 0.9516 0.9581 -0.0180 -0.0104 0.0137
 + - cost(#10)=0.370825  
 + -- Parameters = 2.9543 -5.3631 4.8790 1.5913 -4.3132 -1.6737 0.9915 1.0151 0.9617 -0.0074 0.0182 0.0055
 + - cost(#11)=0.373398  
 + -- Parameters = 3.3643 5.9810 -2.1429 2.3716 6.5285 -1.4762 0.9660 1.0149 0.9794 -0.0342 -0.0064 0.0672
 + - cost(#12)=0.396531  
 + -- Parameters = 5.2283 4.3827 -5.6192 3.1595 6.6924 -2.3846 0.9985 0.9989 0.9818 -0.0271 -0.0076 0.0264
 + - cost(#13)=0.364398  
 + -- Parameters = 5.8882 -2.1259 -0.4755 4.0414 0.7682 -1.0523 0.9980 0.9866 0.9833 0.0022 -0.0058 0.0033
 + - case #1 is now the best
 + - Initial  cost = 0.339238
 + - Initial fine Parameters = 6.0622 0.0701 1.0081 3.6005 -0.6520 -2.2382 0.9968 1.0211 0.9707 -0.0424 0.0062 0.0017
 + - Finalish cost = 0.332421 ; 308 funcs
 + - ini Finalish Parameters = 4.6014 0.5852 0.4457 2.4897 -0.5608 -2.0608 0.9946 1.0310 0.9621 -0.0449 0.0023 0.0021
 +  - Set lpc+ parameters back to purity before Final iterations
 +  - histogram: source clip 283.711 .. 1094.58; base clip 226.792 .. 865.304
 +  - versus source range 0 .. 947.74; base range 0 .. 1046.89
*[#15723=-0.239602] *[#15742=-0.239739] *[#15745=-0.240703] *[#15789=-0.240724] *[#15791=-0.240778] *[#15794=-0.24089] *[#15795=-0.24099] *[#15804=-0.241002] *[#15809=-0.241209] *[#15811=-0.241222] *[#15816=-0.241223] *[#15826=-0.241235] *[#15828=-0.241389] *[#15831=-0.241419] *[#15833=-0.241442] *[#15835=-0.241445] *[#15837=-0.241543] *[#15838=-0.241564] *[#15840=-0.241719] *[#15841=-0.241789] *[#15842=-0.241901] *[#15843=-0.242038] *[#15844=-0.242229] *[#15846=-0.242385] *[#15853=-0.242412] *[#15857=-0.242456] *[#15859=-0.242497] *[#15860=-0.242514] *[#15863=-0.242573] *[#15867=-0.242784] *[#15870=-0.242837] *[#15872=-0.242876] *[#15874=-0.242973] *[#15877=-0.242991] *[#15878=-0.243046] *[#15879=-0.243187] *[#15884=-0.243295] *[#15885=-0.243393] *[#15902=-0.243596] *[#15903=-0.243602] *[#15905=-0.243659] *[#15906=-0.243695] *[#15919=-0.243829] *[#15920=-0.243973] *[#15921=-0.244072] *[#15924=-0.244172] *[#15925=-0.244182] *[#15927=-0.244194] *[#15933=-0.244551] *[#15938=-0.244606] *[#15939=-0.244667] *[#15942=-0.244733] *[#15943=-0.244867] *[#15950=-0.244886] *[#15952=-0.244972] *[#15963=-0.245065] *[#15964=-0.24509] *[#15966=-0.245155] *[#15971=-0.245191] *[#15973=-0.245214] *[#15975=-0.245383] *[#15984=-0.245399] *[#15985=-0.245413] *[#15988=-0.245422] *[#15990=-0.245463] *[#15997=-0.245505] *[#16001=-0.24564] *[#16012=-0.245797] *[#16017=-0.245843] *[#16018=-0.245886] *[#16036=-0.246] *[#16037=-0.24606] *[#16038=-0.246136] *[#16045=-0.246197] *[#16050=-0.24627] *[#16056=-0.246403] *[#16057=-0.24646] *[#16059=-0.246629] *[#16060=-0.246631] *[#16064=-0.246633] *[#16066=-0.246636] *[#16070=-0.246665] *[#16071=-0.246683] *[#16072=-0.246724] *[#16076=-0.246811] *[#16077=-0.246829] *[#16080=-0.246881] *[#16103=-0.246892] *[#16105=-0.247045] *[#16110=-0.247113] *[#16113=-0.247138] *[#16115=-0.247293] *[#16116=-0.247355] *[#16119=-0.247374] *[#16125=-0.247397] *[#16133=-0.247439] *[#16134=-0.247476] *[#16141=-0.247513] *[#16142=-0.247535] *[#16147=-0.247572] *[#16156=-0.247599] *[#16157=-0.247614] *[#16168=-0.247719] *[#16190=-0.247772] *[#16193=-0.247798] *[#16200=-0.247799] *[#16213=-0.247812] *[#16216=-0.247839] *[#16217=-0.247843] *[#16218=-0.247852] *[#16223=-0.247857] *[#16228=-0.247867] *[#16229=-0.247872] *[#16230=-0.247879] *[#16231=-0.24788] *[#16233=-0.247896] *[#16234=-0.247906] *[#16235=-0.247912] *[#16236=-0.247921] *[#16237=-0.247933] *[#16238=-0.247934] *[#16240=-0.247938] *[#16241=-0.247966] *[#16242=-0.247996] *[#16243=-0.248045] *[#16246=-0.248115] *[#16249=-0.248145] *[#16250=-0.248164] *[#16251=-0.248173] *[#16252=-0.24822] *[#16253=-0.248261] *[#16254=-0.248304] *[#16255=-0.248307] *[#16257=-0.248352] *[#16258=-0.248378] *[#16259=-0.248396] *[#16260=-0.248414] *[#16261=-0.248458] *[#16262=-0.248495] *[#16263=-0.2485] *[#16265=-0.248535] *[#16266=-0.24856] *[#16267=-0.248596] *[#16268=-0.248658] *[#16269=-0.248744] *[#16270=-0.248872] *[#16273=-0.249003] *[#16274=-0.249186] *[#16277=-0.24926] *[#16282=-0.249431] *[#16283=-0.249446] *[#16286=-0.249458] *[#16290=-0.24948] *[#16291=-0.249493] *[#16292=-0.249504] *[#16293=-0.249519] *[#16294=-0.249548] *[#16298=-0.249564] *[#16299=-0.249574] *[#16300=-0.249588] *[#16301=-0.249588] *[#16303=-0.24959] *[#16306=-0.249597] *[#16307=-0.249608] *[#16308=-0.249608] *[#16309=-0.249626] *[#16310=-0.249631] *[#16311=-0.249644] *[#16312=-0.249656] *[#16313=-0.249668] *[#16314=-0.249683] *[#16315=-0.249703] *[#16316=-0.249733] *[#16317=-0.249751] *[#16318=-0.249771] *[#16321=-0.249803] *[#16324=-0.249819] *[#16325=-0.249834] *[#16326=-0.249863] *[#16327=-0.249911] *[#16328=-0.249998] *[#16329=-0.25001] *[#16332=-0.250031] *[#16333=-0.250035] *[#16335=-0.25005] *[#16336=-0.250075] *[#16337=-0.2501] *[#16338=-0.250108] *[#16339=-0.250124] *[#16340=-0.250136] *[#16341=-0.250157] *[#16342=-0.250194] *[#16343=-0.250231] *[#16344=-0.25027] *[#16345=-0.25028] *[#16347=-0.250332] *[#16348=-0.250469] *[#16351=-0.250524] *[#16354=-0.250543] *[#16355=-0.250602] *[#16356=-0.250666] *[#16357=-0.250801] *[#16362=-0.250873] *[#16363=-0.250959] *[#16368=-0.25099] *[#16371=-0.250994] *[#16372=-0.251] *[#16373=-0.251011] *[#16374=-0.251019] *[#16376=-0.251019] *[#16377=-0.25103] *[#16378=-0.25104] *[#16379=-0.251066] *[#16380=-0.251094] *[#16381=-0.251154] *[#16382=-0.251185] *[#16383=-0.251227] *[#16384=-0.251261] *[#16385=-0.251271] *[#16386=-0.251293] *[#16387=-0.251299] *[#16389=-0.251319] *[#16390=-0.25135] *[#16391=-0.251397] *[#16392=-0.251461] *[#16393=-0.25153] *[#16394=-0.251593] *[#16395=-0.251652] *[#16400=-0.251668] *[#16402=-0.251675] *[#16403=-0.251684] *[#16404=-0.25169] *[#16405=-0.251696] *[#16406=-0.251708] *[#16409=-0.251719] *[#16410=-0.251736] *[#16411=-0.251765] *[#16412=-0.25181] *[#16413=-0.251847] *[#16418=-0.25187] *[#16421=-0.251874] *[#16425=-0.251879] *[#16426=-0.251885] *[#16429=-0.25189] *[#16430=-0.251895] *[#16431=-0.251895] *[#16432=-0.251899] *[#16434=-0.251902] *[#16435=-0.251906] *[#16436=-0.251917] *[#16437=-0.251924] *[#16438=-0.251932] *[#16439=-0.251936] *[#16440=-0.251948] *[#16441=-0.251955] *[#16442=-0.251969] *[#16443=-0.251987] *[#16446=-0.251987] *[#16448=-0.251991] *[#16454=-0.251993] *[#16460=-0.251997] *[#16461=-0.251997] *[#16462=-0.252001] *[#16463=-0.252005] *[#16465=-0.252011] *[#16466=-0.252018] *[#16467=-0.25202] *[#16468=-0.252024] *[#16469=-0.252024] *[#16470=-0.252028] *[#16473=-0.252036] *[#16474=-0.252042] *[#16475=-0.252046] *[#16476=-0.252047] *[#16478=-0.252053] *[#16479=-0.252057] *[#16480=-0.252061] *[#16481=-0.252066] *[#16482=-0.252067] *[#16484=-0.252068] *[#16486=-0.252077] *[#16487=-0.25209] *[#16488=-0.252098] *[#16489=-0.252105] *[#16490=-0.252116] *[#16491=-0.252135] *[#16492=-0.252137] *[#16496=-0.252145] *[#16497=-0.252156] *[#16498=-0.252175] *[#16499=-0.252215] *[#16504=-0.252217] *[#16505=-0.25222] *[#16506=-0.252234] *[#16507=-0.252239] *[#16510=-0.252243] *[#16511=-0.252243] *[#16513=-0.252249] *[#16514=-0.252251] *[#16515=-0.252258] *[#16516=-0.252263] *[#16517=-0.252269] *[#16518=-0.252281] *[#16523=-0.252284] *[#16525=-0.252287] *[#16526=-0.252291] *[#16527=-0.252297] *[#16528=-0.252307] *[#16529=-0.252312] *[#16530=-0.252319] *[#16531=-0.252326] *[#16532=-0.252332] *[#16533=-0.252341] *[#16534=-0.252359] *[#16537=-0.252366] *[#16538=-0.25237] *[#16540=-0.252385] *[#16541=-0.252395] *[#16542=-0.252399] *[#16543=-0.252406] *[#16544=-0.252418] *[#16545=-0.252423] *[#16546=-0.252424] *[#16548=-0.252428] *[#16549=-0.252431] *[#16550=-0.252434] *[#16553=-0.252435] *[#16555=-0.252441] *[#16556=-0.252443] *[#16557=-0.252446] *[#16558=-0.252449] *[#16559=-0.252453] *[#16560=-0.252458] *[#16561=-0.252458] *[#16563=-0.252462] *[#16564=-0.252466] *[#16565=-0.252472] *[#16566=-0.252482] *[#16567=-0.25249] *[#16572=-0.252496] *[#16573=-0.252505] *[#16574=-0.252523] *[#16575=-0.252535] *[#16576=-0.252566] *[#16581=-0.252566] *[#16585=-0.252567] *[#16587=-0.25257] *[#16588=-0.252575] *[#16589=-0.252578] *[#16590=-0.252579] *[#16591=-0.252584] *[#16594=-0.252588] *[#16595=-0.25259] *[#16596=-0.252592] *[#16599=-0.252593] *[#16607=-0.252597] *[#16608=-0.252597] *[#16610=-0.252598] *[#16611=-0.252598] *[#16615=-0.252602] *[#16620=-0.252603] *[#16623=-0.252607] *[#16635=-0.252607] *[#16640=-0.252609] *[#16645=-0.252612] *[#16646=-0.252614] *[#16647=-0.252617] *[#16648=-0.25262] *[#16649=-0.252623] *[#16654=-0.252628] *[#16655=-0.252632] *[#16656=-0.252635] *[#16657=-0.252647] *[#16658=-0.252657] *[#16665=-0.252661] *[#16667=-0.252663] *[#16670=-0.252665] *[#16679=-0.252668] *[#16682=-0.252669] *[#16683=-0.252669] *[#16686=-0.252672] *[#16689=-0.252674] *[#16690=-0.252677] *[#16691=-0.252678] *[#16694=-0.252682] *[#16695=-0.252684] *[#16696=-0.252684] *[#16697=-0.252686] *[#16702=-0.252686] *[#16704=-0.252688] *[#16713=-0.252689] *[#16714=-0.25269] *[#16715=-0.252693] *[#16718=-0.252694] *[#16721=-0.252695] *[#16722=-0.252695] *[#16725=-0.252698] *[#16728=-0.252698] *[#16730=-0.252699] *[#16733=-0.252701] *[#16734=-0.252702] *[#16739=-0.252702] *[#16743=-0.252704] *[#16744=-0.252704] *[#16752=-0.252705] *[#16759=-0.252708] *[#16760=-0.252708] *[#16764=-0.252709] *[#16767=-0.25271] *[#16770=-0.25271] *[#16781=-0.252711] *[#16790=-0.252712] *[#16795=-0.252713] *[#16800=-0.252714] *[#16803=-0.252716] *[#16812=-0.252717] *[#16815=-0.252718] *[#16821=-0.252719] *[#16828=-0.252719] *[#16829=-0.252721] *[#16832=-0.252722] *[#16839=-0.252723] *[#16840=-0.252724] *[#16842=-0.252724] *[#16843=-0.252725] *[#16844=-0.252728] *[#16847=-0.25273] *[#16850=-0.252731] *[#16857=-0.252732] *[#16863=-0.252732] *[#16867=-0.252733] *[#16869=-0.252733] *[#16870=-0.252733] *[#16883=-0.252734] *[#16885=-0.252734] *[#16888=-0.252734] *[#16890=-0.252735] *[#16893=-0.252736] *[#16922=-0.252737] *[#16928=-0.252737] *[#16929=-0.252738] *[#16932=-0.252738] *[#16934=-0.252739] *[#16939=-0.252739] *[#16944=-0.252739] *[#16945=-0.252739] *[#16947=-0.25274] *[#16948=-0.25274] *[#16950=-0.25274] *[#16953=-0.25274] *[#16959=-0.25274] *[#16962=-0.25274] *[#16963=-0.25274] *[#16964=-0.25274] *[#16967=-0.252741] *[#16968=-0.252741] *[#16969=-0.252741] *[#16970=-0.252741] *[#16973=-0.252741] *[#16974=-0.252742] *[#16981=-0.252742] *[#16982=-0.252742] *[#16983=-0.252742] *[#16984=-0.252742] *[#16986=-0.252742] *[#16987=-0.252743] *[#16988=-0.252743] *[#16990=-0.252743] *[#16991=-0.252743] *[#16992=-0.252744] *[#16993=-0.252744] *[#16994=-0.252744] *[#16997=-0.252744] *[#16998=-0.252745] *[#16999=-0.252745] *[#17000=-0.252745] *[#17001=-0.252745] *[#17006=-0.252745] *[#17008=-0.252745] *[#17009=-0.252745] *[#17011=-0.252745] *[#17012=-0.252746] *[#17013=-0.252746] *[#17016=-0.252747] *[#17017=-0.252747] *[#17021=-0.252747] *[#17023=-0.252747] *[#17024=-0.252748] *[#17025=-0.252748] *[#17026=-0.252748] *[#17027=-0.252748] *[#17028=-0.252749] *[#17029=-0.25275] *[#17031=-0.25275] *[#17032=-0.252751] *[#17033=-0.252751] *[#17038=-0.252752] *[#17041=-0.252752] *[#17044=-0.252752] *[#17046=-0.252752] *[#17047=-0.252752] *[#17051=-0.252753] *[#17062=-0.252753] *[#17065=-0.252753] *[#17068=-0.252753] *[#17069=-0.252753] *[#17070=-0.252753] *[#17072=-0.252754] *[#17075=-0.252754] *[#17077=-0.252754] *[#17078=-0.252754] *[#17079=-0.252754] *[#17080=-0.252755] *[#17081=-0.252755] *[#17082=-0.252755] *[#17085=-0.252755] *[#17088=-0.252755] *[#17095=-0.252755] *[#17096=-0.252756] *[#17103=-0.252756] *[#17104=-0.252756] *[#17107=-0.252756] *[#17108=-0.252756] *[#17109=-0.252756] *[#17110=-0.252757] *[#17111=-0.252757] *[#17113=-0.252757] *[#17116=-0.252757] *[#17120=-0.252757] *[#17135=-0.252758] *[#17138=-0.252758] *[#17141=-0.252758] *[#17158=-0.252758] *[#17177=-0.252758] *[#17179=-0.252758] *[#17180=-0.252759] *[#17183=-0.252759] *[#17186=-0.252759] *[#17193=-0.252759] *[#17202=-0.252759] *[#17205=-0.252759] *[#17206=-0.252759] *[#17213=-0.25276] *[#17216=-0.25276] *[#17219=-0.25276] *[#17221=-0.25276] *[#17224=-0.25276] *[#17227=-0.252761] 
 + - Final    cost = -0.252761 ; 1578 funcs
 + Final fine fit Parameters:
       x-shift=  2.9286   y-shift=  2.7057   z-shift=  1.4179  ...  enorm=  4.2317 mm
       z-angle=  1.2939   x-angle=  0.2508   y-angle= -2.0273  ...  total=  2.4157 deg
       x-scale=  0.9917   y-scale=  1.0474   z-scale=  0.9727  ...  vol3D=  1.0104 = base smaller than source
     y/x-shear= -0.0922 z/x-shear= -0.0058 z/y-shear=  0.0213
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = 2.9286 2.7057 1.4179 1.2939 0.2508 -2.0273 0.9917 1.0474 0.9727 -0.0922 -0.0058 0.0213
++ Unloading unneeded data
++ Wrote -1Dmatrix_save ./anatSS.sub-S12_flip__al_junk_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 73.3
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
#Script is running (command trimmed):
  3dAllineate -allcostX1D IDENTITY __tt_lr_noflipcosts.1D -weight ./vr_base_ts_ns_wt+orig -source ./anatSS.sub-S12_unflipped_ob_temp_al_junk+orig -base ./vr_base_ts_ns+orig -cmass -master BASE -mast_dxyz 1.000000 -weight_frac 1.0 -maxrot 6 -maxshf 10 -VERB -warp aff -source_automask+4 -twobest 11 -twopass -VERB -maxrot 45 -maxshf 40 -fineblur 1 -source_automask+2 
++ 3dAllineate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_ts_ns_wt+orig.BRIK is 13.020722 degrees from plumb.
++ Oblique dataset:./vr_base_ts_ns+orig.BRIK is 13.020722 degrees from plumb.
++ Source dataset: ./anatSS.sub-S12_unflipped_ob_temp_al_junk+orig.HEAD
++ Base dataset:   ./vr_base_ts_ns+orig.HEAD
++ Loading datasets into memory
++ 1554594 voxels in -source_automask+2
++ Zero-pad: ybot=8 ytop=3
++ Zero-pad: zbot=8 ztop=8
++ 42434 voxels [18.4%] in weight mask
++ Number of points for matching = 42434
++ Local correlation: blok type = 'RHDD(11.9925)'
++ base center of mass = 30.634 38.038 24.194 (index)
 + source center of mass = 91.955 89.443 59.109 (index)
 + source-target CM = -0.945 1.671 -2.992 (xyz)
 + estimated center of mass shifts = -0.945 1.671 -2.992
++ shift param auto-range: -61.6..59.7 -69.6..72.9 -59.6..53.6
 + Range param#4 [z-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#1 [x-shift] = -10.945480 .. 9.054520  center = -0.945480
 + Range param#2 [y-shift] = -8.329491 .. 11.670509  center = 1.670509
 + Range param#3 [z-shift] = -12.992386 .. 7.007614  center = -2.992386
 + Range param#4 [z-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#1 [x-shift] = -40.945480 .. 39.054520  center = -0.945480
 + Range param#2 [y-shift] = -38.329491 .. 41.670509  center = 1.670509
 + Range param#3 [z-shift] = -42.992386 .. 37.007614  center = -2.992386
 + 12 free parameters
++ Normalized convergence radius = 0.0000092
++ Final parameter search ranges:
 +       x-shift =  -40.945 ..   39.055
 +       y-shift =  -38.329 ..   41.671
 +       z-shift =  -42.992 ..   37.008
 +       z-angle =  -45.000 ..   45.000
 +       x-angle =  -45.000 ..   45.000
 +       y-angle =  -45.000 ..   45.000
 +       x-scale =    0.833 ..    1.200
 +       y-scale =    0.833 ..    1.200
 +       z-scale =    0.833 ..    1.200
 +     y/x-shear =   -0.111 ..    0.111
 +     z/x-shear =   -0.111 ..    0.111
 +     z/y-shear =   -0.111 ..    0.111
[7m*+ WARNING:[0m No output dataset will be calculated
[7m*+ WARNING:[0m -mast_dxyz 1 option was meaningless :-(
++ OpenMP thread count = 15
 + source mask has 1554594 [out of 4423680] voxels
 + base mask has 56057 [out of 230400] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=90.856 usiz=488.197
 + - copying weight image
 + - using 42434 points from base image [use_all=0]
 + * Exit alignment setup routine
++ Writing -allcostX1D results to '__tt_lr_noflipcosts.1D'
 +  - histogram: source clip 284.533 .. 1100.07; base clip 226.954 .. 876.751
 +  - versus source range 0.000411689 .. 1065.75; base range 0 .. 1046.89
 + 37853 total points stored in 394 'RHDD(12.0364)' bloks
++ -allcostX1D finished
#Script is running (command trimmed):
  3dAllineate -allcostX1D IDENTITY __tt_lr_flipcosts.1D -weight ./vr_base_ts_ns_wt+orig -source ./anatSS.sub-S12_flip_al_junk+orig -base ./vr_base_ts_ns+orig -cmass -master BASE -mast_dxyz 1.000000 -weight_frac 1.0 -maxrot 6 -maxshf 10 -VERB -warp aff -source_automask+4 -twobest 11 -twopass -VERB -maxrot 45 -maxshf 40 -fineblur 1 -source_automask+2 
++ 3dAllineate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_ts_ns_wt+orig.BRIK is 13.020722 degrees from plumb.
++ Oblique dataset:./vr_base_ts_ns+orig.BRIK is 13.020722 degrees from plumb.
++ Source dataset: ./anatSS.sub-S12_flip_al_junk+orig.HEAD
++ Base dataset:   ./vr_base_ts_ns+orig.HEAD
++ Loading datasets into memory
++ 1552970 voxels in -source_automask+2
++ Zero-pad: ybot=8 ytop=3
++ Zero-pad: zbot=8 ztop=8
++ 42434 voxels [18.4%] in weight mask
++ Number of points for matching = 42434
++ Local correlation: blok type = 'RHDD(11.9925)'
++ base center of mass = 30.634 38.038 24.194 (index)
 + source center of mass = 92.858 89.579 58.929 (index)
 + source-target CM = -0.043 1.534 -3.173 (xyz)
 + estimated center of mass shifts = -0.043 1.534 -3.173
++ shift param auto-range: -60.7..60.6 -69.7..72.8 -59.7..53.4
 + Range param#4 [z-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#1 [x-shift] = -10.042946 .. 9.957054  center = -0.042946
 + Range param#2 [y-shift] = -8.465996 .. 11.534004  center = 1.534004
 + Range param#3 [z-shift] = -13.172626 .. 6.827374  center = -3.172626
 + Range param#4 [z-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#1 [x-shift] = -40.042946 .. 39.957054  center = -0.042946
 + Range param#2 [y-shift] = -38.465996 .. 41.534004  center = 1.534004
 + Range param#3 [z-shift] = -43.172626 .. 36.827374  center = -3.172626
 + 12 free parameters
++ Normalized convergence radius = 0.0000092
++ Final parameter search ranges:
 +       x-shift =  -40.043 ..   39.957
 +       y-shift =  -38.466 ..   41.534
 +       z-shift =  -43.173 ..   36.827
 +       z-angle =  -45.000 ..   45.000
 +       x-angle =  -45.000 ..   45.000
 +       y-angle =  -45.000 ..   45.000
 +       x-scale =    0.833 ..    1.200
 +       y-scale =    0.833 ..    1.200
 +       z-scale =    0.833 ..    1.200
 +     y/x-shear =   -0.111 ..    0.111
 +     z/x-shear =   -0.111 ..    0.111
 +     z/y-shear =   -0.111 ..    0.111
[7m*+ WARNING:[0m No output dataset will be calculated
[7m*+ WARNING:[0m -mast_dxyz 1 option was meaningless :-(
++ OpenMP thread count = 15
 + source mask has 1552970 [out of 4423680] voxels
 + base mask has 56057 [out of 230400] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=92.3882 usiz=487.403
 + - copying weight image
 + - using 42434 points from base image [use_all=0]
 + * Exit alignment setup routine
++ Writing -allcostX1D results to '__tt_lr_flipcosts.1D'
 +  - histogram: source clip 283.24 .. 1098.63; base clip 226.954 .. 876.751
 +  - versus source range 0.000605612 .. 1065.75; base range 0 .. 1046.89
 + 37853 total points stored in 394 'RHDD(12.0364)' bloks
++ -allcostX1D finished
No flip cost is -0.737594 for lpc+ZZ cost function
Flip cost is -0.240239 for lpc+ZZ cost function
Data does not need flipping
#Script is running (command trimmed):
  cat_matvec -ONELINE ./anatSS.sub-S12_al_junk_e2a_only_mat.aff12.1D ./anatSS.sub-S12_unflipped_obla2e_mat.1D -I > ./anatSS.sub-S12_al_junk_mat.aff12.1D
#++ Combining anat to epi and oblique transformations
#Script is running (command trimmed):
  3dAllineate -base ./vr_base_ts_ns+orig -1Dmatrix_apply ./anatSS.sub-S12_al_junk_mat.aff12.1D -prefix ./anatSS.sub-S12_al_junk -input ./anatSS.sub-S12_unflipped+orig -master BASE -mast_dxyz 1.000000 -weight_frac 1.0 -maxrot 6 -maxshf 10 -VERB -warp aff -source_automask+4 -twobest 11 -twopass -VERB -maxrot 45 -maxshf 40 -fineblur 1 -source_automask+2
++ 3dAllineate: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_ts_ns+orig.BRIK is 13.020722 degrees from plumb.
++ Source dataset: ./anatSS.sub-S12_unflipped+orig.HEAD
++ Base dataset:   ./vr_base_ts_ns+orig.HEAD
++ Loading datasets into memory
++ base center of mass = 30.634 30.038 16.194 (index)
 + source center of mass = 125.796 90.099 107.087 (index)
 + source-target CM = 5.330 23.619 15.922 (xyz)
[7m*+ WARNING:[0m center of mass shifts (-cmass) are turned off, but would be large
[7m*+ WARNING:[0m   - at least one is more than 20% of search range
 +        -cmass x y z shifts =    5.330   23.619   15.922
 +  shift search range is +/- =   60.669   60.669   37.316
 +                                  8.8%    38.9%    42.7%
 + Range param#4 [z-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000  center = 0.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000  center = 0.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000  center = 0.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000  center = 0.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000  center = 0.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000  center = 0.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000  center = 0.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000  center = 0.000000
++ Final parameter search ranges:
 +       x-shift =  -40.000 ..   40.000
 +       y-shift =  -40.000 ..   40.000
 +       z-shift =  -40.000 ..   40.000
 +       z-angle =  -45.000 ..   45.000
 +       x-angle =  -45.000 ..   45.000
 +       y-angle =  -45.000 ..   45.000
 +       x-scale =    0.833 ..    1.200
 +       y-scale =    0.833 ..    1.200
 +       z-scale =    0.833 ..    1.200
 +     y/x-shear =   -0.111 ..    0.111
 +     z/x-shear =   -0.111 ..    0.111
 +     z/y-shear =   -0.111 ..    0.111
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 15
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 0.9975 0.0896 -0.0099 26.6640 0.0090 -0.2193 -0.9711 166.6287 -0.0879 0.9874 -0.2206 40.0549
++ Unloading unneeded data
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 1.4
++ ###########################################################
 +  
++ ***********************************************************
[7m*+ WARNING:[0m -cmass was turned off, but might have been needed :(
 +           please check your results - PLEASE PLEASE PLEASE
++ ***********************************************************
#++ Creating final output: anat data aligned to epi
# copy is not necessary
#++ Saving history
#Script is running (command trimmed):
  3dNotes -h "align_epi_anat.py -anat2epi -anat anatSS.sub-S12+orig -suffix \
 _al_junk -epi vr_base+orig -epi_base 0 -epi_strip 3dAutomask \
 -anat_has_skull no -cost lpc+ZZ -giant_move -check_flip -volreg off \
 -tshift off" \
 ./anatSS.sub-S12_al_junk+orig

#++ Removing all the temporary files
#Script is running:
  \rm -f ./__tt_vr_base*
#Script is running:
  \rm -f ./__tt_anatSS.sub-S12*

# Finished alignment successfully

if ( ! -f anatQQ.sub-S12+tlrc.HEAD ) then
foreach run ( 01 02 03 04 05 06 )
3dvolreg -verbose -zpad 1 -base vr_base+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -cubic -1Dmatrix_save mat.r01.vr.aff12.1D pb02.sub-S12.r01.tshift+orig
++ 3dvolreg: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base+orig.BRIK is 13.020722 degrees from plumb.
++ Reading in base dataset ./vr_base+orig.BRIK
++ Oblique dataset:./pb02.sub-S12.r01.tshift+orig.BRIK is 13.020722 degrees from plumb.
++ Reading input dataset ./pb02.sub-S12.r01.tshift+orig.BRIK
++ Edging: x=3 y=3 z=2
++ Creating mask for -maxdisp
 + Automask has 44151 voxels
 + 5882 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 412 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..390..391..392..393..394..395..396..397..398..399..400..401..402..403..404..405..406..407..408..409..410..411..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.695  pitch=-0.122  yaw=-0.457  dS=-0.667  dL=-0.537  dP=-0.381
++ Mean: roll=-0.264  pitch=+0.163  yaw=-0.075  dS=-0.177  dL=-0.202  dP=-0.091
++ Max : roll=+0.114  pitch=+0.978  yaw=+0.397  dS=+0.257  dL=+0.119  dP=+0.206
++ Max displacements (mm) for each sub-brick:
 0.00(0.00) 0.14(0.14) 0.13(0.08) 0.10(0.05) 0.12(0.07) 0.15(0.15) 0.14(0.14) 0.15(0.10) 0.16(0.10) 0.23(0.15) 0.21(0.08) 0.27(0.09) 0.22(0.14) 0.21(0.14) 0.23(0.13) 0.18(0.08) 0.24(0.09) 0.13(0.13) 0.14(0.13) 0.17(0.08) 0.20(0.14) 0.16(0.08) 0.26(0.12) 0.21(0.10) 0.23(0.10) 0.18(0.09) 0.16(0.08) 0.14(0.08) 0.21(0.19) 0.21(0.12) 0.21(0.09) 0.20(0.14) 0.30(0.38) 0.38(0.18) 0.27(0.19) 0.39(0.14) 0.38(0.09) 0.40(0.12) 0.38(0.12) 0.29(0.12) 0.32(0.09) 0.25(0.10) 0.35(0.15) 0.31(0.07) 0.25(0.11) 0.25(0.05) 0.36(0.14) 0.36(0.02) 0.37(0.06) 0.39(0.07) 0.38(0.11) 0.32(0.10) 0.39(0.11) 0.32(0.12) 0.34(0.07) 0.34(0.05) 0.36(0.11) 0.21(0.19) 0.30(0.10) 0.33(0.10) 0.27(0.06) 0.21(0.20) 0.36(0.17) 0.39(0.19) 0.39(0.12) 0.40(0.05) 0.39(0.08) 0.30(0.13) 0.29(0.12) 0.25(0.13) 0.31(0.10) 0.25(0.12) 0.26(0.07) 0.26(0.08) 0.17(0.12) 0.29(0.15) 0.29(0.07) 0.23(0.12) 0.26(0.05) 0.31(0.10) 0.28(0.07) 0.32(0.06) 0.31(0.04) 0.33(0.04) 0.27(0.12) 0.25(0.06) 0.33(0.17) 0.11(0.36) 0.27(0.18) 0.21(0.28) 0.25(0.07) 0.26(0.05) 0.25(0.15) 0.58(0.45) 1.55(1.01) 1.47(0.10) 1.43(0.10) 1.34(0.13) 1.37(0.09) 1.32(0.11) 1.15(0.20) 0.80(0.38) 0.63(0.19) 0.67(0.08) 0.67(0.07) 0.61(0.09) 0.58(0.09) 0.44(0.41) 0.47(0.18) 0.57(0.16) 0.71(0.18) 0.59(0.15) 0.65(0.12) 0.67(0.26) 0.79(0.22) 0.70(0.26) 0.67(0.03) 0.69(0.08) 0.68(0.08) 0.68(0.11) 0.68(0.12) 0.69(0.20) 0.68(0.07) 0.80(0.52) 0.73(0.34) 0.68(0.21) 0.66(0.08) 0.67(0.17) 0.67(0.14) 0.65(0.13) 0.65(0.07) 0.65(0.07) 0.67(0.09) 0.69(0.07) 0.71(0.12) 0.83(0.28) 0.71(0.31) 0.73(0.11) 0.76(0.08) 0.67(0.32) 0.46(0.23) 0.63(0.25) 0.68(0.07) 0.71(0.12) 0.76(0.09) 0.79(0.09) 0.72(0.13) 0.65(0.10) 0.64(0.13) 0.69(0.12) 0.65(0.08) 0.65(0.02) 0.63(0.10) 0.85(0.34) 0.90(0.12) 0.83(0.10) 0.87(0.10) 0.84(0.09) 0.84(0.12) 0.79(0.16) 0.82(0.12) 0.81(0.13) 0.83(0.07) 0.88(0.10) 0.92(0.13) 0.85(0.11) 0.81(0.14) 0.82(0.09) 0.83(0.13) 1.01(0.33) 1.15(0.46) 0.95(0.40) 0.99(0.14) 0.97(0.05) 1.01(0.07) 1.07(0.08) 1.00(0.15) 1.02(0.05) 1.03(0.15) 1.04(0.17) 1.03(0.12) 0.97(0.24) 0.98(0.09) 1.02(0.24) 0.95(0.16) 1.00(0.11) 0.97(0.09) 0.97(0.06) 1.01(0.13) 1.03(0.08) 1.03(0.07) 1.09(0.10) 1.03(0.12) 1.06(0.08) 1.05(0.05) 1.05(0.04) 1.10(0.16) 1.01(0.14) 1.07(0.06) 1.02(0.17) 1.08(0.18) 1.05(0.07) 1.07(0.06) 1.07(0.06) 1.03(0.21) 1.12(0.22) 1.17(0.12) 1.16(0.10) 1.15(0.07) 1.09(0.12) 1.10(0.06) 1.10(0.07) 1.06(0.09) 1.10(0.16) 1.07(0.22) 1.06(0.06) 1.02(0.14) 0.96(0.15) 0.96(0.08) 0.94(0.05) 0.94(0.07) 0.94(0.13) 1.02(0.20) 1.09(0.12) 1.09(0.05) 1.09(0.13) 1.39(1.01) 1.41(0.20) 1.31(0.15) 1.30(0.12) 1.34(0.16) 1.25(0.14) 1.23(0.11) 1.19(0.06) 1.17(0.10) 1.30(0.16) 1.17(0.23) 1.05(0.20) 1.13(0.13) 1.23(0.40) 1.26(0.33) 1.11(0.32) 1.17(0.11) 1.00(0.24) 1.03(0.28) 1.08(0.09) 1.03(0.07) 1.06(0.06) 1.06(0.14) 1.08(0.12) 1.11(0.10) 1.11(0.09) 1.13(0.13) 0.98(0.27) 0.91(0.11) 1.06(0.24) 0.98(0.12) 1.04(0.18) 1.09(0.08) 1.04(0.08) 1.05(0.06) 1.04(0.09) 1.08(0.12) 1.12(0.10) 1.10(0.10) 1.62(0.72) 2.46(0.93) 2.12(0.51) 1.91(0.30) 2.00(0.18) 1.91(0.14) 1.89(0.09) 1.84(0.06) 1.80(0.06) 1.73(0.10) 1.78(0.16) 1.89(0.11) 1.84(0.10) 1.69(0.18) 1.57(0.22) 1.62(0.10) 1.59(0.27) 1.67(0.51) 1.59(0.15) 1.49(0.13) 1.47(0.19) 1.44(0.29) 1.51(0.24) 1.49(0.06) 1.43(0.07) 1.44(0.07) 1.42(0.04) 1.36(0.08) 1.40(0.04) 1.40(0.07) 1.34(0.19) 1.36(0.10) 1.27(0.21) 1.12(0.24) 1.29(0.30) 1.29(0.09) 1.28(0.08) 1.39(0.15) 1.35(0.08) 1.32(0.05) 1.35(0.06) 1.32(0.07) 1.33(0.03) 1.33(0.10) 1.29(0.08) 1.32(0.10) 1.26(0.08) 1.31(0.08) 1.29(0.07) 1.25(0.11) 1.28(0.13) 1.24(0.07) 1.20(0.14) 1.25(0.10) 1.20(0.14) 1.17(0.13) 1.19(0.10) 1.19(0.08) 1.21(0.12) 1.17(0.07) 1.14(0.12) 1.19(0.12) 1.16(0.04) 1.13(0.07) 1.21(0.11) 1.19(0.16) 1.01(0.25) 1.10(0.20) 1.09(0.10) 1.06(0.11) 1.12(0.14) 1.10(0.07) 1.05(0.13) 1.09(0.07) 1.13(0.10) 1.13(0.07) 1.13(0.19) 1.12(0.09) 1.08(0.10) 1.12(0.08) 1.07(0.10) 1.13(0.12) 1.11(0.07) 1.05(0.12) 1.11(0.12) 1.10(0.03) 1.11(0.21) 1.10(0.23) 1.05(0.11) 1.07(0.33) 1.14(0.10) 1.09(0.14) 1.15(0.16) 1.13(0.07) 1.21(0.20) 1.24(0.07) 1.27(0.08) 1.25(0.07) 1.24(0.03) 1.23(0.05) 1.23(0.06) 1.18(0.10) 1.21(0.10) 1.30(0.13) 1.25(0.10) 1.26(0.06) 1.31(0.09) 1.80(0.74) 1.75(0.13) 1.46(0.31) 1.43(0.07) 1.45(0.10) 1.45(0.08) 1.43(0.07) 1.44(0.05) 1.39(0.10) 1.41(0.16) 1.42(0.10) 1.38(0.11) 1.39(0.10) 1.37(0.09) 1.44(0.14) 1.39(0.18) 1.36(0.13) 1.41(0.12) 1.47(0.14) 1.47(0.11) 1.44(0.10) 1.47(0.12) 1.46(0.07) 1.46(0.07) 1.46(0.06) 1.45(0.05) 1.44(0.03) 1.41(0.09) 1.43(0.08) 1.37(0.07) 1.39(0.09) 1.38(0.10) 1.40(0.10) 1.38(0.09) 1.37(0.05) 1.44(0.22) 1.38(0.07) 1.33(0.11) 1.19(0.21) 1.15(0.27)
++ Max displacement in automask = 2.46 (mm) at sub-brick 266
++ Max delta displ  in automask = 1.01 (mm) at sub-brick 94
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb02.sub-S12.r01.tshift+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: A cast of thousands
[7m*+ WARNING:[0m input 'a' is not used in the expression
cat_matvec -ONELINE anatQQ.sub-S12.aff12.1D anatSS.sub-S12_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dNwarpApply -master anatQQ.sub-S12+tlrc -dxyz 3 -source pb02.sub-S12.r01.tshift+orig -nwarp anatQQ.sub-S12_WARP.nii.gz mat.r01.warp.aff12.1D -prefix rm.epi.nomask.r01
++ 3dNwarpApply: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Warped
++ -master dataset is 'anatQQ.sub-S12+tlrc'
++ output grid size = 3 mm
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb02.sub-S12.r01.tshift+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb02.sub-S12.r01.tshift+orig.BRIK is 13.020722 degrees from plumb.
++ opened source dataset 'pb02.sub-S12.r01.tshift+orig'
++ Processing -nwarp 
++ Memory usage: enter THD_nwarp_dataset_array
Arena 0:
system bytes     = 1566343168
in use bytes     = 1555089328
Total (incl. mmap):
system bytes     = 1566343168
in use bytes     = 1555089328
max mmap regions =          1
max mmap bytes   =  113700864
++ Warping:..............................................Z
++ total Elapsed time = 1929.6 sec
3dNwarpApply -master anatQQ.sub-S12+tlrc -dxyz 3 -source rm.epi.all1+orig -nwarp anatQQ.sub-S12_WARP.nii.gz mat.r01.warp.aff12.1D -interp cubic -ainterp NN -quiet -prefix rm.epi.1.r01
++ 3dNwarpApply: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Warped
++ -master dataset is 'anatQQ.sub-S12+tlrc'
++ output grid size = 3 mm
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 13.020722 degrees from plumb.
++ opened source dataset 'rm.epi.all1+orig'
++ Memory usage: enter THD_nwarp_dataset_array
Arena 0:
system bytes     = 1566343168
in use bytes     = 1555089488
Total (incl. mmap):
system bytes     = 1566343168
in use bytes     = 1555089488
max mmap regions =          1
max mmap bytes   =  113700864
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+tlrc
++ 3dTstat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: KR Hammett & RW Cox
end
3dvolreg -verbose -zpad 1 -base vr_base+orig -1Dfile dfile.r02.1D -prefix rm.epi.volreg.r02 -cubic -1Dmatrix_save mat.r02.vr.aff12.1D pb02.sub-S12.r02.tshift+orig
++ 3dvolreg: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base+orig.BRIK is 13.020722 degrees from plumb.
++ Reading in base dataset ./vr_base+orig.BRIK
++ Oblique dataset:./pb02.sub-S12.r02.tshift+orig.BRIK is 13.020722 degrees from plumb.
++ Reading input dataset ./pb02.sub-S12.r02.tshift+orig.BRIK
++ Edging: x=3 y=3 z=2
++ Creating mask for -maxdisp
 + Automask has 44096 voxels
 + 5884 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 412 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..390..391..392..393..394..395..396..397..398..399..400..401..402..403..404..405..406..407..408..409..410..411..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.706  pitch=-0.034  yaw=-0.357  dS=-1.693  dL=-0.641  dP=-0.112
++ Mean: roll=-0.446  pitch=+0.280  yaw=-0.101  dS=-0.977  dL=-0.438  dP=+0.141
++ Max : roll=-0.316  pitch=+1.107  yaw=+0.234  dS=-0.418  dL=-0.250  dP=+0.355
++ Max displacements (mm) for each sub-brick:
 1.28(0.00) 1.21(0.16) 1.18(0.11) 1.20(0.08) 1.25(0.21) 1.23(0.14) 1.23(0.15) 1.23(0.09) 1.16(0.13) 1.20(0.10) 1.22(0.07) 1.14(0.12) 1.19(0.10) 1.19(0.05) 1.14(0.07) 1.17(0.04) 1.20(0.08) 1.18(0.06) 1.19(0.11) 1.25(0.08) 1.19(0.06) 1.34(0.26) 1.97(0.73) 1.52(0.58) 1.51(0.22) 1.48(0.10) 1.51(0.04) 1.44(0.08) 1.39(0.11) 1.72(0.44) 1.86(0.23) 1.66(0.26) 1.65(0.04) 1.64(0.06) 1.57(0.18) 1.57(0.10) 1.55(0.08) 1.58(0.15) 1.69(0.15) 1.72(0.07) 1.68(0.05) 1.65(0.04) 1.69(0.06) 1.65(0.05) 1.62(0.04) 1.66(0.05) 1.64(0.05) 1.61(0.07) 1.63(0.06) 1.61(0.05) 1.59(0.05) 1.63(0.08) 1.58(0.08) 1.59(0.03) 1.64(0.07) 1.61(0.07) 1.63(0.08) 1.61(0.03) 1.61(0.04) 1.60(0.03) 1.62(0.08) 1.58(0.10) 1.50(0.10) 1.52(0.13) 1.47(0.11) 1.52(0.06) 1.48(0.05) 1.46(0.06) 1.55(0.13) 1.52(0.09) 1.45(0.27) 1.46(0.11) 1.46(0.03) 1.48(0.13) 1.53(0.17) 1.50(0.04) 1.49(0.09) 1.51(0.07) 1.46(0.10) 1.50(0.07) 1.55(0.09) 1.49(0.09) 1.48(0.08) 1.46(0.21) 1.41(0.09) 1.48(0.07) 1.43(0.06) 1.44(0.06) 1.52(0.15) 1.51(0.08) 1.49(0.09) 1.53(0.10) 1.56(0.11) 1.52(0.09) 1.54(0.08) 1.50(0.11) 1.55(0.12) 1.52(0.09) 1.53(0.07) 1.54(0.04) 1.51(0.09) 1.56(0.13) 1.51(0.13) 1.53(0.07) 1.50(0.08) 1.48(0.04) 1.54(0.40) 1.70(0.42) 1.79(0.17) 1.80(0.03) 1.85(0.12) 1.81(0.11) 1.88(0.18) 1.88(0.08) 1.83(0.10) 1.90(0.09) 1.90(0.06) 1.87(0.07) 1.79(0.12) 1.72(0.15) 1.80(0.16) 1.81(0.07) 1.77(0.12) 1.81(0.09) 1.81(0.06) 1.82(0.10) 1.81(0.07) 1.73(0.23) 1.81(0.13) 1.78(0.10) 1.84(0.11) 1.85(0.09) 1.82(0.06) 1.82(0.06) 1.81(0.05) 1.83(0.05) 1.92(0.10) 1.91(0.03) 1.85(0.09) 1.88(0.05) 1.87(0.05) 1.83(0.06) 1.88(0.23) 1.92(0.13) 1.93(0.15) 1.96(0.23) 1.88(0.14) 1.89(0.10) 1.95(0.16) 2.01(0.07) 1.91(0.11) 1.87(0.08) 1.77(0.13) 1.79(0.09) 1.82(0.11) 1.84(0.14) 1.83(0.27) 2.07(0.48) 1.95(0.18) 1.74(0.28) 1.76(0.05) 1.82(0.08) 1.79(0.05) 1.76(0.08) 1.76(0.05) 1.67(0.14) 1.70(0.10) 1.65(0.10) 1.73(0.10) 1.74(0.10) 1.72(0.05) 1.73(0.09) 1.70(0.10) 1.72(0.05) 1.75(0.10) 1.74(0.12) 1.72(0.09) 1.70(0.05) 1.80(0.22) 1.70(0.21) 1.65(0.34) 1.74(0.15) 1.74(0.07) 1.71(0.06) 1.79(0.12) 1.79(0.09) 1.74(0.08) 1.76(0.09) 1.79(0.09) 1.80(0.05) 1.77(0.11) 1.75(0.05) 1.76(0.05) 1.76(0.05) 1.74(0.08) 1.76(0.10) 1.75(0.04) 1.71(0.06) 1.75(0.05) 1.71(0.11) 1.68(0.07) 1.72(0.05) 1.74(0.07) 1.73(0.05) 1.78(0.29) 1.76(0.09) 1.78(0.20) 1.78(0.05) 1.77(0.10) 1.75(0.04) 1.70(0.13) 1.69(0.11) 1.72(0.08) 1.85(0.22) 1.86(0.16) 1.82(0.21) 1.80(0.12) 1.85(0.13) 1.83(0.06) 1.83(0.03) 1.85(0.05) 1.78(0.11) 1.78(0.06) 1.78(0.11) 1.82(0.11) 1.77(0.20) 1.78(0.09) 1.81(0.07) 1.84(0.06) 1.81(0.09) 1.78(0.07) 1.85(0.11) 1.87(0.02) 1.81(0.10) 1.81(0.08) 1.82(0.07) 1.80(0.07) 1.23(0.61) 1.19(0.20) 1.43(0.27) 1.53(0.15) 1.53(0.11) 1.54(0.08) 1.51(0.14) 1.50(0.05) 1.46(0.12) 1.43(0.07) 1.52(0.16) 1.55(0.05) 1.55(0.08) 1.52(0.07) 1.56(0.10) 1.59(0.14) 1.62(0.05) 1.58(0.07) 1.60(0.12) 1.66(0.13) 1.62(0.09) 1.62(0.05) 1.52(0.15) 1.55(0.07) 1.42(0.21) 1.45(0.06) 1.53(0.15) 1.48(0.11) 1.52(0.11) 1.49(0.05) 1.46(0.11) 1.50(0.10) 1.49(0.03) 1.47(0.06) 1.50(0.05) 1.52(0.05) 1.52(0.10) 1.53(0.15) 1.62(0.13) 1.73(0.12) 1.95(0.32) 3.38(1.62) 3.64(0.42) 3.54(0.16) 3.72(0.19) 3.69(0.06) 3.61(0.09) 3.59(0.04) 3.56(0.04) 3.56(0.04) 3.56(0.06) 3.51(0.06) 3.23(0.31) 2.66(0.67) 2.57(0.17) 2.70(0.21) 2.75(0.10) 2.70(0.07) 2.62(0.11) 2.60(0.07) 2.56(0.06) 2.50(0.15) 2.47(0.25) 2.34(0.21) 2.07(0.34) 2.17(0.13) 2.30(0.18) 2.30(0.04) 2.25(0.07) 2.32(0.09) 2.17(0.16) 2.10(0.11) 2.18(0.10) 2.30(0.14) 2.32(0.05) 2.28(0.05) 2.29(0.06) 2.30(0.04) 2.26(0.05) 2.28(0.03) 2.32(0.05) 2.26(0.06) 2.24(0.03) 2.28(0.06) 2.21(0.12) 2.38(0.22) 2.63(0.31) 2.44(0.23) 2.47(0.04) 2.51(0.05) 2.47(0.05) 2.40(0.10) 2.36(0.06) 2.33(0.07) 2.54(0.21) 2.51(0.05) 2.40(0.13) 2.46(0.08) 2.51(0.08) 2.49(0.05) 2.45(0.08) 2.46(0.11) 2.44(0.09) 2.45(0.08) 2.49(0.15) 2.42(0.14) 2.47(0.09) 2.41(0.08) 2.44(0.07) 2.38(0.09) 2.42(0.05) 2.37(0.14) 2.45(0.16) 2.44(0.08) 2.38(0.08) 2.40(0.04) 2.38(0.11) 2.43(0.07) 2.43(0.03) 2.42(0.05) 2.49(0.10) 2.50(0.04) 2.51(0.05) 2.53(0.06) 2.50(0.06) 2.51(0.05) 2.51(0.06) 2.52(0.07) 2.54(0.08) 2.56(0.05) 2.52(0.10) 2.50(0.05) 2.52(0.08) 2.46(0.06) 2.51(0.08) 2.45(0.10) 2.50(0.07) 2.47(0.05) 2.48(0.04) 2.49(0.07) 2.45(0.08) 2.49(0.15) 2.44(0.10) 2.45(0.04) 2.46(0.02) 2.44(0.09) 2.54(0.12) 2.51(0.05) 2.48(0.07) 2.53(0.12) 2.48(0.08) 2.49(0.05) 2.45(0.07) 2.51(0.10) 2.47(0.07) 2.51(0.06) 2.49(0.03) 2.48(0.06) 2.49(0.06) 2.43(0.09) 2.40(0.07) 2.43(0.14) 2.46(0.48) 2.48(0.13) 2.42(0.07) 2.49(0.14) 2.37(0.36) 2.35(0.09) 2.41(0.12) 2.47(0.10) 2.47(0.08) 2.52(0.13) 2.44(0.14) 2.44(0.10) 2.51(0.18)
++ Max displacement in automask = 3.72 (mm) at sub-brick 281
++ Max delta displ  in automask = 1.62 (mm) at sub-brick 278
++ Wrote dataset to disk in ./rm.epi.volreg.r02+orig.BRIK
3dcalc -overwrite -a pb02.sub-S12.r02.tshift+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: A cast of thousands
[7m*+ WARNING:[0m input 'a' is not used in the expression
cat_matvec -ONELINE anatQQ.sub-S12.aff12.1D anatSS.sub-S12_al_junk_mat.aff12.1D -I mat.r02.vr.aff12.1D
3dNwarpApply -master anatQQ.sub-S12+tlrc -dxyz 3 -source pb02.sub-S12.r02.tshift+orig -nwarp anatQQ.sub-S12_WARP.nii.gz mat.r02.warp.aff12.1D -prefix rm.epi.nomask.r02
++ 3dNwarpApply: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Warped
++ -master dataset is 'anatQQ.sub-S12+tlrc'
++ output grid size = 3 mm
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb02.sub-S12.r02.tshift+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb02.sub-S12.r02.tshift+orig.BRIK is 13.020722 degrees from plumb.
++ opened source dataset 'pb02.sub-S12.r02.tshift+orig'
++ Processing -nwarp 
++ Memory usage: enter THD_nwarp_dataset_array
Arena 0:
system bytes     = 1566343168
in use bytes     = 1555089328
Total (incl. mmap):
system bytes     = 1566343168
in use bytes     = 1555089328
max mmap regions =          1
max mmap bytes   =  113700864
++ Warping:..............................................Z
++ total Elapsed time = 1903.8 sec
3dNwarpApply -master anatQQ.sub-S12+tlrc -dxyz 3 -source rm.epi.all1+orig -nwarp anatQQ.sub-S12_WARP.nii.gz mat.r02.warp.aff12.1D -interp cubic -ainterp NN -quiet -prefix rm.epi.1.r02
++ 3dNwarpApply: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Warped
++ -master dataset is 'anatQQ.sub-S12+tlrc'
++ output grid size = 3 mm
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 13.020722 degrees from plumb.
++ opened source dataset 'rm.epi.all1+orig'
++ Memory usage: enter THD_nwarp_dataset_array
Arena 0:
system bytes     = 1566343168
in use bytes     = 1555089488
Total (incl. mmap):
system bytes     = 1566343168
in use bytes     = 1555089488
max mmap regions =          1
max mmap bytes   =  113700864
3dTstat -min -prefix rm.epi.min.r02 rm.epi.1.r02+tlrc
++ 3dTstat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: KR Hammett & RW Cox
end
3dvolreg -verbose -zpad 1 -base vr_base+orig -1Dfile dfile.r03.1D -prefix rm.epi.volreg.r03 -cubic -1Dmatrix_save mat.r03.vr.aff12.1D pb02.sub-S12.r03.tshift+orig
++ 3dvolreg: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base+orig.BRIK is 13.020722 degrees from plumb.
++ Reading in base dataset ./vr_base+orig.BRIK
++ Oblique dataset:./pb02.sub-S12.r03.tshift+orig.BRIK is 13.019373 degrees from plumb.
++ Reading input dataset ./pb02.sub-S12.r03.tshift+orig.BRIK
++ Edging: x=3 y=3 z=2
++ Creating mask for -maxdisp
 + Automask has 44188 voxels
 + 5868 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 295 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.124  pitch=-0.161  yaw=-0.366  dS=-0.423  dL=-0.108  dP=-0.140
++ Mean: roll=-0.043  pitch=-0.034  yaw=-0.205  dS=+0.164  dL=-0.002  dP=+0.205
++ Max : roll=+0.087  pitch=+0.249  yaw=+0.164  dS=+0.864  dL=+0.150  dP=+0.552
++ Max displacements (mm) for each sub-brick:
 0.75(0.00) 0.74(0.53) 0.70(0.13) 0.64(0.15) 0.72(0.13) 0.65(0.10) 0.68(0.07) 0.67(0.09) 0.61(0.12) 0.65(0.15) 0.63(0.07) 0.73(0.17) 0.56(0.28) 0.56(0.09) 0.66(0.17) 0.57(0.14) 0.59(0.06) 0.61(0.10) 0.63(0.18) 0.65(0.08) 0.63(0.11) 0.63(0.09) 0.64(0.11) 0.67(0.06) 0.64(0.08) 0.60(0.07) 0.61(0.06) 0.59(0.05) 0.62(0.10) 0.64(0.05) 0.64(0.04) 0.63(0.02) 0.64(0.08) 0.65(0.10) 0.59(0.12) 0.57(0.06) 0.67(0.21) 0.67(0.09) 0.68(0.11) 0.61(0.07) 0.62(0.09) 0.68(0.09) 0.65(0.08) 0.68(0.18) 0.77(0.42) 0.68(0.15) 0.59(0.18) 0.57(0.10) 0.58(0.10) 0.61(0.16) 0.65(0.10) 0.67(0.13) 0.65(0.07) 0.67(0.07) 0.66(0.12) 0.67(0.08) 0.71(0.05) 0.64(0.09) 0.70(0.11) 0.72(0.19) 0.61(0.18) 0.70(0.13) 0.64(0.12) 0.76(0.20) 0.72(0.08) 0.72(0.03) 0.64(0.14) 0.71(0.10) 0.63(0.08) 0.74(0.13) 0.76(0.10) 0.63(0.25) 0.63(0.10) 0.67(0.11) 0.79(0.21) 0.91(0.15) 0.72(0.29) 0.76(0.10) 0.81(0.12) 0.72(0.18) 0.76(0.05) 0.90(0.27) 1.30(0.52) 1.18(0.17) 1.16(0.08) 1.20(0.10) 1.17(0.07) 1.18(0.04) 1.27(0.09) 1.23(0.09) 1.21(0.12) 1.25(0.06) 1.16(0.10) 1.25(0.12) 1.19(0.09) 1.12(0.10) 1.15(0.10) 0.98(0.22) 0.92(0.08) 0.96(0.10) 1.07(0.11) 1.09(0.14) 1.07(0.13) 1.14(0.13) 1.08(0.14) 1.15(0.07) 1.06(0.09) 1.10(0.08) 1.03(0.13) 1.03(0.07) 1.10(0.08) 1.08(0.09) 1.14(0.10) 1.15(0.05) 1.09(0.09) 1.14(0.09) 1.05(0.13) 1.15(0.15) 1.15(0.08) 1.12(0.08) 1.10(0.06) 1.06(0.11) 1.15(0.13) 1.10(0.05) 1.19(0.12) 1.05(0.16) 1.13(0.12) 1.10(0.10) 1.09(0.12) 1.08(0.04) 1.05(0.09) 1.02(0.13) 1.08(0.21) 1.10(0.05) 1.12(0.06) 1.10(0.07) 1.14(0.11) 1.15(0.05) 1.17(0.09) 1.03(0.25) 1.04(0.15) 1.02(0.09) 1.12(0.13) 1.05(0.09) 1.06(0.06) 1.07(0.07) 1.00(0.09) 0.95(0.11) 0.93(0.11) 0.85(0.14) 0.83(0.09) 0.79(0.08) 0.81(0.07) 0.78(0.09) 0.81(0.05) 0.79(0.07) 0.80(0.05) 0.81(0.07) 0.82(0.04) 0.79(0.07) 0.82(0.07) 0.78(0.06) 0.78(0.04) 0.82(0.06) 0.76(0.07) 0.82(0.09) 0.76(0.09) 0.79(0.04) 0.87(0.11) 0.71(0.27) 0.66(0.09) 0.55(0.12) 0.53(0.09) 0.50(0.05) 0.50(0.08) 0.50(0.10) 0.51(0.10) 0.52(0.07) 0.52(0.13) 0.54(0.12) 0.51(0.05) 0.52(0.05) 0.47(0.09) 0.69(0.88) 0.89(0.27) 0.83(0.07) 0.79(0.08) 0.78(0.04) 0.75(0.09) 0.78(0.08) 0.71(0.10) 0.66(0.08) 0.67(0.08) 0.64(0.07) 0.70(0.08) 0.59(0.12) 0.64(0.08) 0.57(0.08) 0.57(0.08) 0.53(0.08) 0.62(0.10) 0.61(0.04) 0.49(0.14) 0.52(0.08) 0.49(0.12) 0.47(0.09) 0.51(0.09) 0.55(0.13) 0.55(0.13) 0.50(0.08) 0.53(0.10) 0.50(0.04) 0.48(0.05) 0.51(0.18) 0.50(0.11) 0.53(0.15) 0.51(0.03) 0.57(0.11) 0.55(0.06) 0.47(0.10) 0.53(0.07) 0.46(0.10) 0.65(0.26) 0.80(0.23) 0.80(0.08) 0.73(0.11) 0.79(0.07) 0.78(0.13) 0.69(0.14) 0.77(0.09) 0.67(0.11) 0.68(0.08) 0.71(0.09) 0.71(0.10) 0.69(0.05) 0.70(0.09) 0.86(0.22) 0.76(0.10) 0.75(0.12) 0.85(0.17) 0.70(0.16) 0.71(0.09) 0.68(0.07) 0.76(0.12) 0.72(0.11) 0.71(0.13) 0.73(0.08) 0.77(0.07) 0.74(0.03) 0.75(0.02) 0.70(0.05) 0.67(0.08) 0.70(0.09) 0.67(0.09) 0.71(0.08) 0.68(0.08) 0.62(0.08) 0.65(0.12) 0.64(0.11) 0.68(0.08) 0.64(0.06) 0.64(0.07) 0.64(0.05) 0.63(0.05) 0.59(0.08) 0.65(0.09) 0.66(0.06) 0.62(0.05) 0.63(0.04) 0.58(0.07) 0.60(0.04) 0.62(0.08) 0.58(0.06) 0.63(0.08) 0.61(0.04) 0.64(0.05) 0.65(0.04) 0.58(0.11) 0.64(0.12) 0.35(0.47) 0.50(0.20) 0.37(0.16) 0.40(0.10) 0.43(0.12) 0.44(0.14) 0.44(0.09) 0.44(0.06) 0.42(0.07) 0.47(0.08) 0.48(0.03) 0.43(0.11) 0.47(0.08) 0.46(0.08) 0.43(0.07) 0.41(0.06)
++ Max displacement in automask = 1.30 (mm) at sub-brick 82
++ Max delta displ  in automask = 0.88 (mm) at sub-brick 183
++ Wrote dataset to disk in ./rm.epi.volreg.r03+orig.BRIK
3dcalc -overwrite -a pb02.sub-S12.r03.tshift+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: A cast of thousands
[7m*+ WARNING:[0m input 'a' is not used in the expression
cat_matvec -ONELINE anatQQ.sub-S12.aff12.1D anatSS.sub-S12_al_junk_mat.aff12.1D -I mat.r03.vr.aff12.1D
3dNwarpApply -master anatQQ.sub-S12+tlrc -dxyz 3 -source pb02.sub-S12.r03.tshift+orig -nwarp anatQQ.sub-S12_WARP.nii.gz mat.r03.warp.aff12.1D -prefix rm.epi.nomask.r03
++ 3dNwarpApply: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Warped
++ -master dataset is 'anatQQ.sub-S12+tlrc'
++ output grid size = 3 mm
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb02.sub-S12.r03.tshift+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb02.sub-S12.r03.tshift+orig.BRIK is 13.019373 degrees from plumb.
++ opened source dataset 'pb02.sub-S12.r03.tshift+orig'
++ Processing -nwarp 
++ Memory usage: enter THD_nwarp_dataset_array
Arena 0:
system bytes     = 1566306304
in use bytes     = 1493700480
Total (incl. mmap):
system bytes     = 1566306304
in use bytes     = 1493700480
max mmap regions =          1
max mmap bytes   =  113700864
++ Warping:..................................................Z
++ total Elapsed time = 1292.8 sec
3dNwarpApply -master anatQQ.sub-S12+tlrc -dxyz 3 -source rm.epi.all1+orig -nwarp anatQQ.sub-S12_WARP.nii.gz mat.r03.warp.aff12.1D -interp cubic -ainterp NN -quiet -prefix rm.epi.1.r03
++ 3dNwarpApply: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: Zhark the Warped
++ -master dataset is 'anatQQ.sub-S12+tlrc'
++ output grid size = 3 mm
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 13.019373 degrees from plumb.
++ opened source dataset 'rm.epi.all1+orig'
++ Memory usage: enter THD_nwarp_dataset_array
Arena 0:
system bytes     = 1566306304
in use bytes     = 1493700640
Total (incl. mmap):
system bytes     = 1566306304
in use bytes     = 1493700640
max mmap regions =          1
max mmap bytes   =  113700864
3dTstat -min -prefix rm.epi.min.r03 rm.epi.1.r03+tlrc
++ 3dTstat: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: KR Hammett & RW Cox
end
3dvolreg -verbose -zpad 1 -base vr_base+orig -1Dfile dfile.r04.1D -prefix rm.epi.volreg.r04 -cubic -1Dmatrix_save mat.r04.vr.aff12.1D pb02.sub-S12.r04.tshift+orig
++ 3dvolreg: AFNI version=AFNI_20.3.02 (Nov 12 2020) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base+orig.BRIK is 13.020722 degrees from plumb.
++ Reading in base dataset ./vr_base+orig.BRIK
++ Oblique dataset:./pb02.sub-S12.r04.tshift+orig.BRIK is 20.346895 degrees from plumb.
++ centers of base and input datasets are 58.21 mm apart
** Input ./pb02.sub-S12.r04.tshift+orig.HEAD and base ./vr_base+orig.HEAD don't have same grid spacing!
   Input: dx= 3.000  dy= 3.000  dz= 3.750
   Base:  dx= 3.000  dy=-3.000  dz= 3.750
** Input ./pb02.sub-S12.r04.tshift+orig.HEAD and base ./vr_base+orig.HEAD don't have same orientation!
   Input: A-P I-S R-L
   Base:  R-L P-A I-S 
** FATAL ERROR: perhaps you could make your datasets match?
